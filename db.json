{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/folder-structure.png","path":"images/folder-structure.png","modified":0,"renderable":0},{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"source/images/redux-logger.png","path":"images/redux-logger.png","modified":0,"renderable":0},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"cfbba97d10b19c8e0d14e65c2d98f60f468de22a","modified":1504390680000},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1501959204000},{"_id":"themes/clean-blog/README.md","hash":"861dd2f959ab75d121226f4f3e2f61f4bc95fddb","modified":1501959204000},{"_id":"themes/clean-blog/_config.yml","hash":"427ef94602af3bf3ffdff57ab9e2bdd7af25f969","modified":1505829796000},{"_id":"source/_posts/2017-8-6-Redux-Intermediate.md","hash":"4807c0e4d31f2aa3a28ebd188087f0d1c5f88626","modified":1505596345000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1501956587000},{"_id":"themes/clean-blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1501959204000},{"_id":"themes/clean-blog/.git/config","hash":"0037ed70f19e4933b19020ad514d8e9e049174f1","modified":1501959204000},{"_id":"themes/clean-blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1501959202000},{"_id":"themes/clean-blog/.git/index","hash":"6789911f99583bb9ad33bf159ccc415e8c761a1f","modified":1502648949000},{"_id":"themes/clean-blog/.git/packed-refs","hash":"78749f2f1de403b00552d862f076d37586b9b819","modified":1501959204000},{"_id":"source/images/.DS_Store","hash":"a0d9760f5dc8eae5c3b9b8dcf2faa2bea9156f9e","modified":1504390698000},{"_id":"themes/clean-blog/languages/de.yml","hash":"e07702c8e8b0a065ac2fbcb65689a10fa427353f","modified":1501961859000},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1501959204000},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1501959204000},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1501959204000},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1501959204000},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1501959204000},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1501959204000},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1501959204000},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1501959204000},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1501959204000},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1501959204000},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"f2ef73afc3d275333329bb30b9369b82e119da76","modified":1501959204000},{"_id":"themes/clean-blog/layout/index.ejs","hash":"5eaa012583c083a8388576530dc7828aa90a47d0","modified":1501960925000},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1501959204000},{"_id":"themes/clean-blog/layout/page.ejs","hash":"591af587e1aae962950de7e79bd25c1f060c69ac","modified":1501959204000},{"_id":"themes/clean-blog/layout/post.ejs","hash":"71d9be3a9a626d230e16f6d3d020e3d447b2008a","modified":1505832043000},{"_id":"source/images/folder-structure.png","hash":"e3b962a4acf53ebba3a82c6b1a6f4c04f0eb7fe7","modified":1504390711000},{"_id":"themes/clean-blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1501959202000},{"_id":"themes/clean-blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1501959202000},{"_id":"themes/clean-blog/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1501959202000},{"_id":"themes/clean-blog/.git/logs/HEAD","hash":"d6894ad3a9ec8e8803bd6fa0075d7682a8959d6a","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"ae3e19dadf7ab2cee84d4025a963c8699852ec16","modified":1505834796000},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"502cf57b29cc9ce3a78b89b9a9a03b2b59111ad6","modified":1502027934000},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"5cbf50e4a28bb5485434e1f21e280fecdc744a7b","modified":1501961530000},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1502399570000},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"b06f5620790373f2dd3933903baa7d4cab721d0b","modified":1505830925000},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1501959204000},{"_id":"themes/clean-blog/layout/_partial/tag-category-index.ejs","hash":"10cdc1b7866999c714a666557c150d2c79c1fba9","modified":1501959204000},{"_id":"themes/clean-blog/source/css/article.styl","hash":"e30713540fb16d118fa828d1fc33ec7181dcffc2","modified":1505143382000},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"f739df8cb197519343c73d416822ab1428703297","modified":1505238109000},{"_id":"themes/clean-blog/source/css/base.styl","hash":"ec400ea44e262064e3ee329a2de7f3aa09026c6a","modified":1502028530000},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1501959204000},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1501959204000},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1501959204000},{"_id":"themes/clean-blog/.git/refs/heads/master","hash":"0f3b4e362de29ccd7fa4b5983e9a0ea546623577","modified":1501959204000},{"_id":"themes/clean-blog/.git/objects/pack/pack-757edf654c4d05aabc1264d961264199285815c4.idx","hash":"16b5bb5446bd5c3f76779f9e08cba6508430f66b","modified":1501959204000},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1501959204000},{"_id":"source/images/redux-logger.png","hash":"1e8cf7417de168eb69e5c881af50d5a9dc55c0db","modified":1505255353000},{"_id":"themes/clean-blog/.git/logs/refs/heads/master","hash":"d6894ad3a9ec8e8803bd6fa0075d7682a8959d6a","modified":1501959204000},{"_id":"themes/clean-blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1501959204000},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1501959204000},{"_id":"themes/clean-blog/.git/logs/refs/remotes/origin/HEAD","hash":"d6894ad3a9ec8e8803bd6fa0075d7682a8959d6a","modified":1501959204000},{"_id":"themes/clean-blog/.git/objects/pack/pack-757edf654c4d05aabc1264d961264199285815c4.pack","hash":"d2f95644371a3f3da6caa34077f234252b0aaa86","modified":1501959204000},{"_id":"public/2017/08/05/hello-world/index.html","hash":"4ebed48a94784b2a119acfeab47b96bda1177669","modified":1505257456905},{"_id":"public/archives/index.html","hash":"213789dcd70df99b91b0f82fccf74573b044d746","modified":1505834443264},{"_id":"public/archives/2017/index.html","hash":"05948bf5a34addd1323d1fbdcbee3602fba09777","modified":1505834443266},{"_id":"public/archives/2017/08/index.html","hash":"3df2bd2d04bf7b59a24acd226e3701ec16ce97d2","modified":1505595947813},{"_id":"public/index.html","hash":"cc4fbcd1e445d83c59c655e4351f4899fc6cc9f8","modified":1505831048860},{"_id":"public/tags/redux/index.html","hash":"8ee77108178f7256a45f87505f1bdddbca0cb613","modified":1505831048860},{"_id":"public/tags/frontend/index.html","hash":"7515daa4c676a81ef121fa6ea2fd607c01cf776f","modified":1505831048860},{"_id":"public/tags/js/index.html","hash":"5529d73703dcadb666345270b685871a4bc6024d","modified":1505831048860},{"_id":"public/tags/javascript/index.html","hash":"641add1c759a0d45acc11d71363b4bba09c1692f","modified":1505831048860},{"_id":"public/tags/architecture/index.html","hash":"cd66e9ff74a71e2d6bdd735c26fcd319faa445f4","modified":1505831048860},{"_id":"public/tags/selectors/index.html","hash":"8593c73cd2e9a2258ce16ef50bf7b75849c5f133","modified":1505831048860},{"_id":"public/tags/sagas/index.html","hash":"c554495cc0b4a07d02744d71751441dedbe5a295","modified":1505831048861},{"_id":"public/tags/middlewares/index.html","hash":"e0e2ef4792ca7087ba76af087a354d9fd0f28a15","modified":1505831048861},{"_id":"public/2017/08/06/Redux-Intermediate/index.html","hash":"be8283256fce152a8a5762dd2a771afc4417eb1d","modified":1505596350151},{"_id":"public/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1505257456909},{"_id":"public/images/folder-structure.png","hash":"e3b962a4acf53ebba3a82c6b1a6f4c04f0eb7fe7","modified":1505257457271},{"_id":"public/css/article.css","hash":"caea826e362bf74995da4705b8c30e8902a8e8f3","modified":1505257457275},{"_id":"public/css/mixins.css","hash":"336924e530cf9acde766bbfc874285b0b537aad6","modified":1505257457275},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505257457275},{"_id":"public/css/base.css","hash":"4681b41876a054bb4a5698d655d5fc3f5487def8","modified":1505257457275},{"_id":"public/css/style.css","hash":"11909bbeb37c46ba1be30d13b165cba56854ff8a","modified":1505257457275},{"_id":"public/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1505257457276},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1505257457278},{"_id":"public/images/redux-logger.png","hash":"1e8cf7417de168eb69e5c881af50d5a9dc55c0db","modified":1505257457279},{"_id":"source/_posts/2017-9-16-Redux-Intermediate.md","hash":"b655c3c8c4094950cf07b1314bcb389a0469f778","modified":1505833457000},{"_id":"public/archives/2017/09/index.html","hash":"64d8d4d65cc42dd3f8ced34f64e0754afd2ef04d","modified":1505834443266},{"_id":"public/2017/09/16/Redux-Intermediate/index.html","hash":"7e126e05f70cf0182a977d3a9b13b7e9c551c4b9","modified":1505834598937}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Redux Selectors, Sagas, Middlewares and more...","author":"Ale Arce","summary":"This article is aimed to show some middle level angles when using Redux in the front end. Here we will cover some <b><i>non-typical</i></b> actors / tools, identifying their roles and limitations. By doing this, I intend to explain how important is to decouple responsibilities.\n","date":"2017-09-16T14:25:58.000Z","share_link":"http://www.alearce.io/2017/09/16/Redux-Intermediate/","_content":"## Intro\n\nIn my first post I wanted to share some appreciations I have regarding specific practices in the frontend development when implementing Redux. I will try to explain how you can<b> shape your assets in the frontend</b> so you can keep an organized structure. I will try to improve code examples gradually, from simple to more complex but robust code...\nIf I am lucky, I will receive some feedback on this and then I can perform updates on this post.\nIn several parts of the article, I point to the [Reducers Recommended Structure](#Reducers-Recommended-Structure) section, you may want to read it first and then re-read it when necessary, due this reducers structure is one of the core concepts of the article.\n\nI assume that you have basic knowledge of Redux and strong knowledge of ES6. Also I will be using React to build example components.\n## What we will cover\n<i>[Folder Structure](#Folder-Structure)</i>\n<i>[Why Smart and Dumb Components](#Why-Smart-and-Dumb-Components)</i>\n<i>[Standard Actions](#Standard-Actions)</i>\n<i>[Middlewares](#Middlewares)</i>\n<i>[Redux Selectors](#Redux-Selectors)</i>\n<i>[Reducers Recommended Structure](#Reducers-Recommended-Structure)</i>\n<i>[Store Config](#Store-Config)</i>\n\n## Folder Structure\nI found this structure very effective. By no means I intend to say it will be useful for you, but in order to understand some of the examples I provide on this post, it's necessary to see the files and folders structure, plus a brief summary of each one of them. I took this example form a previous project I was working on, I will focus on the redux-related parts:\n<p align=\"center\">![](/images/folder-structure.png)</p>\n### /actions\nContains business-entity-grouped actions. We will go deeper on this.\n### /api\nThis folder contains the API communication layer of the project.\n### /components\nDumb components, no business logic, no redux needed.\n### /constants\nI recommend to place one single file containing all the string constants representing action names. I will provide more detail for this file, and of course you may decide to have several files instead of a single one.\n### /containers\nSmart components, specific business logic, redux needed.\n### /reducers\nPretty self explanatory, reducers go here.\n### /sagas\nHere we will place the needed sagas. I will provide an explanation of redux-sagas, however, it's a quite advanced concept and I'm pretty much a beginner on this.\n### /stores\nHere we create the store, one of the key parts of Redux. We apply the middlewares to the store as well.\n\n## Why Smart and Dumb Components?\n\nOne of the most important things when using redux, is to keep in mind that you should follow a <i>\"reusable components\"</i> philosophy. More precisely, inside the Redux world most of the developers have taken an smart-components and dumb-components approach:\n\n### Smart Components\n> Those that have specific business logic and probably are specific to your app. These components <strong>use Redux</strong>, because they attach (connect) themselves to the parts of the app-state they need in order to work. This is what Redux is meant for. An example of a smart component would be a UsersListComponent, or may be a BirthdaySelectComponent.\n\n### Dumb Components\n> They are context / business agnostic, and this makes them fully reusable. So, an example of a dumb-component would be a ListComponent. This is not a UsersListComponent, or a ProductsListComponent. Dumb components don't have business knowledge, they are fully reusable as long as you provide \"the firm\" they need to render, and most importantly, <strong>they don't need Redux</strong>, because all its data is provided by some other smarter component.\n\nRedux is a framework to maintain the app's state, <strong><i>why am I talking about smart and dumb components</i></strong>?\nSmart components will use redux, dumb components won't. This is important for this article given that I'm trying to explain a way to keep your code clean. <strong><i>If all your components access the app state, your code can get messy very quickly</i></strong>.\n\n## Standard Actions\nI would describe actions as public notices, distributed within your app. This means that someone will trigger an action and some other subscribers may do something regarding that action. Pretty much like an observer pattern, but cooler. Actions must first be defined, and then they can be triggered, intercepted and analyzed to do something about them. These are examples of <strong><i>action definitions</i></strong>:\n```javascript\n// src/actions/products.js\nimport { createAction } from 'redux-actions'\n\nexport const selectProduct = createAction('PRODUCTS_SELECT', product => product.id)\nexport const fetchProducts = createAction('PRODUCTS_FETCH', () => [{name: 'P1', id: 1}, {name: 'P2', id: 2}])\n/* We will define fetchProducts soon, per now it just hardcodes an array of products as payload */\n/* This file uses some ES6 features. It may be confusing if you are not used to them */\n```\n\n<details>\n  <summary><i>A bit more detail regarding createAction</i></summary>`createAction` is a function that receives 3 parameters: `actionName`, `payloadCreator` and `metadataCreator`. I won't deepen that much on this topic, but here's a basic explanation:\n  \\- `actionName`: a string representing the identifier of the action.\n  \\- `payloadCreator`: a function definition, that will receive the arguments provided by the action invoker, and returns the payload accessible in reducers watching the action (action.payload).\n  \\- `metadataCreator`: a function definition, that will receive the arguments provided by the action invoker, and returns the metadata accessible in reducers watching the action (action.metadata).\n  Deciding if something is payload or metadata, is up to you.\n</details>\n\nNote here that actions are function definitions that expect to be invoked with some data. In this example, `selectProduct` is a function that expects to be invoked with an object, <strong><i>locally called</i></strong> product. The action definition trusts that the product will have an `id` property. As this action definition is returning `product.id`, that `id` will be the payload in the reducer subscribed to the action `PRODUCTS_SELECT`. If we want we can send the entire product to the reducer, by simply doing `product => product)`.\nIm my experience, it's very common to see `lodash` usages (`find`, `get`, `filter`, `reduce`, `first`), in these action definitions. I believe there's no problem with that. Remember, what `payloadCreator` returns, will be `action.payload` in the reducers watching for the action, and that's what you will be able to include in the app's state. We want to keep the state as dumb as possible, very simple. If we need to transform / decorate the simple data we stored in the app's state, we can do it by using [selectors](#Redux-Selectors).\n\nGiven those two defined actions, some smart component (consisting of two files), may do something like this:\n\n```javascript\n// src/containers/products/index.js\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchProducts, selectProduct } from 'actions/products'\nimport ProductsListComponent from './ProductsListComponent'\n\nlet mapStateToProps = state => ({\n  products: state.products.productsList,\n  selectedProduct: state.products.selectedProduct\n})\n\nlet mapDispatchToProps = dispatch => bindActionCreators({\n  selectProduct,\n  fetchProducts\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsListComponent)\n```\nAt this point, in the component definition has access to four props:\n* `this.props.products`: <strong>connected</strong> to `state.products.productsList`.\n\n* `this.props.selectedProduct`: <strong>connected</strong> to `state.products.selectedProduct`.\n\n* `this.props.selectProduct`: a function I can call, which will result in an action (`PRODUCTS_SELECT`)\n\n* `this.props.fetchProducts`: a function I can call, which will result in an action (`PRODUCTS_FETCH`)\n\n```javascript\n// src/containers/products/products.jsx\nimport React from 'react'\n\nclass ProductsListComponent extends React.Component {\n  componentDidMount() {\n    this.props.fetchProducts() // once mounted, we will fetch. Fetch is returning hardcoded data for now\n  }\n\n  render() {\n    return (\n      <div>\n        <ul>\n          {\n            this.props.products.map((product, key) => (\n              <li key={key} onClick={() => this.props.selectProduct(product)}>{product.name}</li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default ProductsListComponent\n```\n\n> Note that this smart component is triggering actions differently:\n* `this.props.selectProduct(product)` is triggered and it includes data for the `payloadCreator`.\n* `this.props.fetchProducts()` is triggered but it doesn't include a payload, because it's not needed so far.\n\n> <strong><i>If you want to send a payload when executing an action</i></strong>, you need to provide arguments to the function call, i.e. `this.props.myActionName({some: 'payload'}, {some: 'metadata'})`. These parameters are received by the action creators, like `product` is being received by selectProduct, which takes it and returns `product.id`. All reducers expecting for a `PRODUCTS_SELECT` action, will receive the new `id`.\n\nUntil now, we have have defined some actions and some component connections to those actions and to some parts of the state as well. The next step is <strong><i>understand the needed reducer</i></strong>, which will receive the payload and update the corresponding part of the state. By doing this, <strong><i>all the components connected to those parts of the state</i></strong>, will receive the new version of the state.\nYou may find this reducer example a bit strange, I haven't completely described my approach to reducers yet. You can [take a look at that section](#Reducers-Recommended-Structure) now if you want.\n```javascript\n// src/reducers/products.js\n\nimport { handleActions } from 'redux-actions'\nimport * as actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nconst initialState = {\n  productsList: [],\n  selectedProduct: ''\n}\n\nexport default handleActions({\n  [`${PRODUCTS.SELECT}`]: (state, action) => ({\n    ...state,\n    selectedProduct: action.payload // action.payload will be the product id provided by the action as I described earlier\n  }),\n  [`${PRODUCTS.FETCH}`]: (state, action) => ({\n    ...state,\n    productsList: action.payload // action.payload will be the hardcoded array I provided earlier\n  })\n}, initialState)\n```\nNow, the Redux cycle on this practical example:\n* A smart component is mounted and it triggers, `this.props.fetchProducts()`. No payload needed\n* The action definition for `fetchProducts` is per now returning a hardcoded list of products, that will end up in the reducer watching for the action `PRODUCTS_FETCH`.\n* The reducer updates the state with the list of products. All components connected to `state.products.productsList` will receive the update.\n  * Particularly, `products.jsx` will now iterate through the provided array instead of an empty one (initial state).\n\n## Middlewares\nMiddlewares are fragments of code you integrate to your app. <i>They work in the middle</i> of the actions pipeline, analyzing every action and deciding if they should do something about it or not, and then passing the action to the next middleware or actor in the pipeline. For this article I want to introduce the following middlewares:\n\n[Redux Thunk](https://github.com/gaearon/redux-thunk)\n[Redux Promise Middleware](https://github.com/pburtchaell/redux-promise-middleware)\n[Redux Saga](https://github.com/redux-saga/redux-saga)\n[Redux Logger](https://github.com/evgenyrodionov/redux-logger)\n\nI have found these middlewares really useful. These tools provide a mechanism to improve the actions workflow in the web app and keep it clean and logic. You can find how to include middlewares in the [store config section](#Store-Config). Let's talk about each one of them.\n### Redux Thunk\nSo far, I've been talking about [reducers returning new versions of the state](#Reducers-Recommended-Structure), i.e. returning an object. The redux-thunk middleware <strong><i>checks if the </i></strong>`payloadCreator`<strong><i> returns a function instead of a plain object</i></strong>. If the `payloadCreator` is returning a function, then the middleware invokes that function with two parameters: `dispatch` and `getState`, both functions.\nI wrote this based on the [official examples](https://github.com/gaearon/redux-thunk#motivation), the code can be improved but I wanted to leave it as explicit as possible.\n\n```javascript\n// src/actions/products.js\nimport actionTypes from 'constants/action-types'\nimport { createAction } from 'redux-actions'\n\nconst { PRODUCTS } = actionTypes\n\nconst selectProductAction = createAction('PRODUCTS_SELECT', productId => productId)\n\nexport let selectProduct = (product) => {\n  return (dispatch, getState) => { // function returned, which redux-thunk will invoke with the well-know parameters\n    const { products } = getState()\n\n    if (products.selectedProduct === product.id) {\n      return\n    }\n\n    dispatch(selectProductAction(product.id));\n  }\n}\n```\nMy goal with this example is to show the following:\n* An action to select a product is created.\n* A thunk to select a product is created as well.\n* The thunk checks if the payload provided is the same as the existing in the state.\n  * If the data is the same, it returns null (single return statement).\n  * If the data is different, then it dispatches the proper action.\n\nInstead of directly returning a payload and which will update all the related reducers, you check something to decide between executing the action or not.\n\nWhy would you select a product that is already selected? <strong><i>Redux Thunk enables you to evaluate some criteria before dispatching an action</i></strong>.\n\n### Redux Promise Middleware\nI find this middleware a bit complicated to explain, so I'll do my best.\n\nRemember that middlewares are (in part) action analyzers. In this case, to use `redux-promise-middleware`, the function `payloadCreator` needs to return an object whose only key is `promise`, and it's value is a promise instance, i.e. `{promise: promiseInstance}`.\n\n```javascript\n// src/api/products.js\nimport axios from 'axios'\n\nexport let fetchProducts = () => axios.get('https://some-api-url.com/products')\n// axios' simple way to perform a get method\n```\n\n```javascript\n// src/actions/products.js\nimport { createAction } from 'redux-actions'\nimport * as productsApi from 'api/products'\nimport actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nexport const fetchProducts = createAction(PRODUCTS.FETCH, () => {\n  const promise = productsApi.fetchProducts()\n\n  return { promise }\n})\n// Also using some ES6 features here\n```\n`Redux-promise-middleware` detects this and automatically modifies the default action pipeline, avoiding the dispatch of `PRODUCTS_FETCH`, and producing two possible results:\n* `PRODUCTS_FETCH_PENDING`\n* `PRODUCTS_FETCH_FULFILLED`\n\nOr...\n\n* `PRODUCTS_FETCH_PENDING`\n* `PRODUCTS_FETCH_REJECTED`\n\nThis two flows represent the possible states of a promise. With this, your reducers watch for actions `_PENDING`, `_FULFILLED` and `_REJECTED`.\n\nWhy is this useful? Let's see:\n* By watching `_PENDING` you can set some loading value, in order to activate spinners or loading components in your front-end.\n* By watching `_FULFILLED` you will receive in `action.payload`, the data provided by the back end response.\n* By watching `_REJECTED` you can specify error messages based on the back end response.\n\n```javascript\n// src/reducers/products.js\nimport { handleActions } from 'redux-actions'\nimport * as actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nconst initialState = {\n  productsList: [],\n  selectedProduct: '',\n  loading: false,\n  error: null\n}\n\nexport default handleActions({\n  [`${PRODUCTS.FETCH}_PENDING`]: (state, action) => ({\n    ...state,\n    loading: true,\n    productsList: [],\n    error: null\n  }),\n  [`${PRODUCTS.FETCH}_FULFILLED`]: (state, action) => ({\n    ...state,\n    loading: false,\n    productsList: action.payload.data,\n    error: null\n    // use lodash to get the data _.get(action, 'payload.data', [])\n    // remember action.payload in this case is a back-end response\n  }),\n  [`${PRODUCTS.FETCH}_REJECTED`]: (state, action) => ({\n    ...state,\n    loading: false\n    productsList: [],\n    error: `Something went wrong, ${action.payload.error.message}`,\n    // use lodash to get the data _.get(action, 'payload.error.message', null)\n    // remember action.payload in this case is a back-end response\n  })\n}, initialState)\n```\n\nWith this, your components connected to these parts of the state, can logically change their content when these actions produce a change in the state. The action `PRODUCTS_FETCH` will never be dispatched. Instead, the middleware will ensure that `PRODUCTS_FETCH_PENDING` and the corresponding `_FULFILLED` or `_REJECTED` are thrown.\nLet's see a possible component's code.\n\n```javascript\n// src/containers/products/index.js\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchProducts, selectProduct } from 'actions/products'\nimport ProductsListComponent from './ProductsListComponent'\n\nlet mapStateToProps = state => ({\n  products: state.products.productsList,\n  loading: state.products.loading, //new prop connected to the state\n  error: state.products.error, //new prop connected to the state\n  selectedProduct: state.products.selectedProduct\n})\n\nlet mapDispatchToProps = dispatch => bindActionCreators({\n  selectProduct,\n  fetchProducts\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsListComponent)\n```\n\n```javascript\n// src/containers/products/products.jsx\nimport React from 'react'\n\nclass ProductsListComponent extends React.Component {\n  componentDidMount() {\n    this.props.fetchProducts()\n  }\n\n  getProducts() {\n    return (\n      <ul>\n        {\n          this.props.products.map((product, key) => (\n            <li key={key} onClick={() => this.props.selectProduct(product)}>{product.name}</li>\n          ))\n        }\n      </ul>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.loading && 'loading component'}\n        {this.props.error && `Oops... ${error}`}\n        {this.props.products.length > 0 && this.getProducts()}\n      </div>\n    )\n  }\n}\n\nexport default ProductsListComponent\n```\n\nThis last example requires at least an intermediate knowledge of ES6.\n\n### Redux Saga\nI believe Sagas is a quite advanced concept, so I will be giving some very basic approach to understand what they do, and how to implement them.\nUntil now, we went through the main actors of Redux. If I was clear enough, you we can agree that so far, the only listeners / watchers of actions, are the reducers. The goal of a reducer is modify a specific part of the app's state. I would describe a Redux Saga as actions watchers as well, but in this case they do not modify the app's state. What a saga does, is to execute some code after an action is dispatched. This is useful in some specific cases:\n* Given an action:\n  * You want to dispatch another specific action, or several actions.\n  * You want to change the url.\n  * You want to store something in sessionStorage.\n  * etc...\n\nI will take the first case as an example to show you how to use Redux Sagas. Let's continue with the last example of `products/index.js` and `products/products.jsx`.\nSo far, when `state.products.productsList` is an array of products, `products.jsx` will render an `ul > li` of products. With the current code, clicking on any of those `li` will trigger a `PRODUCT_SELECT` action. Let's put a class on the selected `li`:\n\n```javascript\ngetProducts() {\n  return (\n    <ul>\n      {\n        this.props.products.map((product, key) => (\n          <li className={this.props.selectedProduct === product.id ? 'selected' : ''} key={key} onClick={() => this.props.selectProduct(product)}>\n            {product.name}\n          </li>\n        ))\n      }\n    </ul>\n  )\n}\n```\n<small>You can use [classNames](https://github.com/JedWatson/classnames) to correctly implement a logical className approach. I just want to keep this as a stand alone example.</small>\nNow, you can style that `.selected` class to see the result. But we have a problem, what happens on the first load, before any click? `state.products.selectedProduct` is an empty string, so at the beginning, no product will be selected. Let's suppose we want to select the first product by default, when the list loads. We have at least two ways to do it:\n\nModify the reducer, so with the `_FULFILLED` action not only the `productsList` will be returned, but also `selectedProduct`:\n```javascript\n[`${PRODUCTS.FETCH}_FULFILLED`]: (state, action) => ({\n  ...state,\n  loading: false,\n  productsList: action.payload.data,\n  error: null,\n  selectedProduct: action.payload.data[0].id\n  // if data is an empty array, this will cause problems\n})\n```\n\nOr, in the other hand, we can take advantage of this case to implement Redux Sagas and properly dispatch a `PRODUCT_SELECT` action after a `PRODUCTS_FETCH_FULFILLED` action is completed:\n```javascript\n// src/sagas/index.js\nimport { fork } from 'redux-saga/effects'\nimport { watchProductsFetchFulfilled } from './products'\n\nexport default function* rootSaga() {\n  yield fork(watchProductsFetchFulfilled)\n}\n// this code can grow very quickly so there may be a better organization than the present one...\n```\n```javascript\nimport { takeLatest } from 'redux-saga'\nimport { select, put } from 'redux-saga/effects'\nimport { selectProduct } from 'actions/products'\nimport actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nexport function* selectProductAfterProductsFulfilled() {\n  const { products } = yield select() // select function is like getState()\n\n  if (products.productsList.length > 0) {\n    yield put(selectProduct(products.productsList[0].id)) // puts a new action on the flow\n  }\n}\n\nexport function* watchProductsFetchFulfilled() {\n  yield* takeLatest(\n    [`${PRODUCTS.FETCH}_FULFILLED`, /* Other actions you want to watch */],\n    selectProductAfterProductsFulfilled\n  )\n}\n```\nRedux sagas use [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function%2A), which is an entire concept by itself, so I won't go deeper on this.\n\n### Redux Logger\nThis middleware is not precisely the most functional one, but in the development phase, I think it's a great resource. Basically what offers you is a console output, directly on the browser. There are several other tools that do the same and much more, [redux-devtools](https://github.com/gaearon/redux-devtools) for example, but I wanted to mention [Redux Logger](https://github.com/evgenyrodionov/redux-logger) given that it's quite comfortable for me in development.\nThe result you will accomplish is something like this:\n<p align=\"center\">![](/images/redux-logger.png)</p>\nYou can configure the action log to be collapsed / expanded by default. You can check the entire list of actions being dispatched, the app's state before and after, and also the payload of each action. I find this quite cool.\n\nTo implement this middleware, you just have to [include it in your store](#Store-Config).\n\n\n## Redux Selectors\nI wanted to introduce the concept of selectors because they are really helpful to keep our code decoupled and our components clean.\nLet's suppose you receive a list of products like this one:\n```javascript\n[{\n  name: 'apples',\n  id: 1,\n  harvested: '2017-08-12T20:17:46.384Z'\n},\n{\n  name: 'pears',\n  id: 2,\n  harvested: '2017-07-11T20:15:03.204Z'\n}]\n```\nThis array would be in your `state.products.productsList` after a `_FULFILLED` action is dispatched. To display the dates, probably you will want to format their values using [moment](https://www.npmjs.com/package/moment), and you would be tempted to do so inside the component:\n\n```javascript\nlet mapStateToProps = state => ({\n  products: state.products.productsList.map(({name, id, harvested}) => ({\n    name,\n    id,\n    harvested: moment('2017-07-11T20:15:03.204Z').format('YYYY-MM-DD')\n  })),\n  loading: state.products.loading, //new prop connected to the state\n  error: state.products.error, //new prop connected to the state\n  selectedProduct: state.products.selectedProduct\n  // not the cool way\n})\n```\nThis is, creating a new array of all the products but with each date formatted, inside `mapStateToProps`. The method `mapStateToProps` should be, as it's name stands, a simple map between the state and the component's props. But here the component should not be <strong><i>decorating</i></strong> or <strong><i>calculating</i></strong> anything.\nIf you keep transforming / decorating inside your components, your code can quickly get messy. Keeping in mind that the app's state must remain as simple as we can, <strong><i>all the transformation, calculation and decoration of data will be done in selectors</i></strong>.\n\nSelectors can be just functions that receive the state, perform all the needed work, and return the result to the components. That would be the same thing I just described but with the function definition somewhere else.\nWe will use a better approach, implementing `createSelector`, a method provided by the library [reselect](https://github.com/reactjs/reselect). By doing this, our selectors will be [memoized](https://github.com/reactjs/reselect#motivation-for-memoized-selectors), which basically means that our selector functions will be executed only when a part of the state they are watching changes (i.e. they will be executed only when needed).\n\n```javascript\n// src/selectors/products.js\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\n\nconst selectProductsList = state => state.products.productsList\nconst selectSelectedProduct = state => state.products.selectedProduct\n\nexport const getProductsList = createSelector(\n  [selectProductsList],\n  productsList => productsList.map(({name, id, harvested}) => ({\n    name,\n    id,\n    harvested: moment('2017-07-11T20:15:03.204Z').format('YYYY-MM-DD')\n  }))\n)\n\nexport const getSelectedProduct = createSelector(\n  [selectProductsList, selectSelectedProduct],\n  (productsList, selectedProduct) => productsList.find(product => product.id === selectedProduct)\n)\n```\n\nAnd then, your smart component would pass the state to the selector methods, connecting to a <strong><i>decorated / calculated</i></strong> part of the state.\n\n```javascript\n// your mapStateToProps method\nimport { getSelectedProduct, getProductsList } from 'selectors/products'\n// ...\nlet mapStateToProps = state => ({\n  products: getProductsList(state),\n  loading: state.products.loading, //new prop connected to the state\n  error: state.products.error, //new prop connected to the state\n  selectedProduct: getSelectedProduct(state)\n})\n```\nWith this, we have implemented a selector to transform our dates, but also we included `getSelectedProduct`, which is a selector that calculates the selected product object (with all it's data, not only the `id` as we had before). The state remains simple and it doesn't repeat data. The selector functions, based on that simple data, decorate and calculate new data, and then provides it to the components.\nTo conclude the example, our component render method would change from:\n```javascript\n<li className={this.props.selectedProduct === product.id ? 'selected' : ''} key={key} onClick={() =>\n```\n```javascript\n<li className={this.props.selectedProduct.id === product.id ? 'selected' : ''} key={key} onClick={() =>\n  // this.props.selectedProduct is now an object\n```\n\n## Reducers Recommended Structure\nIn first place, I've seen a lot code like this:\n```javascript\n// src/reducers/products.js\nlet productsReducer = (state = {productsList: [], selectedProduct: ''}, action) => {\n  switch (action.type) {\n    case 'PRODUCTS_RECEIVED':\n      return {\n        ...state,\n        productsList: action.payload\n      }\n    case 'PRODUCTS_SELECT':\n      return {\n        ...state,\n        selectedProduct: action.payload\n      }\n    default:\n      return state\n  }\n}\n```\nFirst issue, your action types are completely hardcoded. Second, you are using a switch. Third, which is your initial state? It's the `{productsList: [], selectedProduct: ''}` fragment, really long line if your initial state grows, and not clear to see if some new dev enters to the team...\nIn addition, let's suppose your back end returns your products like this:\n```javascript\n{\n  ...\n  data: {\n    main: {\n      result: {\n        array_data: {\n          data: [{\n            product: 'apples',\n            harvested: '2017-08-12T20:17:46.384Z'\n          },\n          {\n            test: 'pears',\n            harvested: '2017-07-11T20:15:03.204Z'\n          }]\n        }\n      }\n    }\n  }\n  ...\n}\n```\nYou may find this rare or impossible. Trust me, API responses can be even worst than this. In this case, your state would receive a deeply nested object as data... Not cool at all.\n\nI think that these reasons are enough to provide some advice in the Reducers structure.\n\nIn first place, define an action-names-constants-file at a project level, your actions names will be defined there. Here's a simple constants file defining actions:\n```javascript\n// src/constants/action-types.js\nexport const PRODUCTS_FETCH = 'PRODUCTS_FETCH'\nexport const PRODUCTS_SELECT = 'PRODUCTS_SELECT'\n```\n\nBut I would advice to do something like this instead:\n```javascript\n// src/constants/action-types.js\nimport keyMirror from 'key-mirror-nested'\n\nexport default keyMirror({\n  PRODUCTS: {\n    FETCH: null,\n    SELECT: null\n  }\n}, { connChar: '_' })\n```\n<details>\n  <summary><i>Brief explanation</i></summary>[key-mirror-nested](https://github.com/apolkingg8/KeyMirrorNested) is a library I find very useful for this case. Here I export an object with one key, `PRODUCTS`, and if you try `PRODUCTS.FETCH`, that object will have the value `PRODUCTS_FETCH`. So that's the constant I need. Notice that I used underscore as `connChar`, you can use whatever you prefer.\n</details>\n\nAnd then your reducer would be something like:\n\n```javascript\n// src/reducers/products.js\nimport { handleActions } from 'redux-actions'\nimport * as actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nconst initialState = {\n  productsList: [],\n  selectedProduct: ''\n}\n\nexport default handleActions({\n  [`${PRODUCTS.SELECT}`]: (state, action) => ({\n    ...state,\n    selectedProduct: action.payload\n  }),\n  [`${PRODUCTS.FETCH}`]: (state, action) => ({\n    ...state,\n    productsList: action.payload\n  })\n}, initialState)\n```\n\nBy doing this\n* The initial state is very clear\n* Action types are not hardcoded\n* We are using an object notation instead of a switch\n* And we are clearly resolving the deeply nested problem the API may be sending us.\n\nFinally, I recommend to have `src/reducers/index.js` to centralize all your reducers and keep a clear idea of your state:\n\n```javascript\n// src/reducers/index.js\nimport { combineReducers } from 'redux'\nimport products from './products'\n\nexport default combineReducers({\n  products\n  // other reducers\n})\n```\nThis file will then be consumed when we [configure our store](#Store-Config).\n\n## Store Config\nThis is just an example of how to declare your store. You may find better / cleaner ways to do it. I believe this part of code was needed in the article, given that I mention so many things regarding middlewares. The configureStore is where you reference your `reducers/index.js` file, creating the store with the data you defined in your reducers, and attaching all the middlewares you want to the actions pipeline.\n\n```javascript\n// src/stores/configureStore.js\nimport 'babel-polyfill'\n\nimport { createStore, applyMiddleware } from 'redux'\nimport createLogger from 'redux-logger'\nimport { browserHistory } from 'react-router'\nimport { routerMiddleware } from 'react-router-redux'\nimport promiseMiddleware from 'redux-promise-middleware'\nimport createSagaMiddleware from 'redux-saga'\nimport thunkMiddleware from 'redux-thunk'\n\nimport indexReducer from 'reducers/index'\nimport rootSaga from 'sagas/index'\n\nconst logger = createLogger({ collapsed: true })\nconst router = routerMiddleware(browserHistory)\nconst promise = promiseMiddleware()\nconst saga = createSagaMiddleware()\n\nconst createStoreWithMiddleware = applyMiddleware(\n    router,\n    logger,\n    promise,\n    saga,\n    thunkMiddleware)(createStore)\n\nexport let configureStore = () => {\n  const store = createStoreWithMiddleware(rootReducer, {})\n  saga.run(rootSaga)\n  return store\n}\n```\n\nThen you can have an `index.jsx` file, which will simply import the `configureSture` function exported by `configureStore.js`:\n\n```javascript\nimport ReactDOM from 'react-dom'\nimport { configureStore } from './stores/configureStore'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n  </Provider>,\n  document.getElementById('yourRootElementId')\n)\n```\n","source":"_posts/2017-9-16-Redux-Intermediate.md","raw":"---\ntitle: Redux Selectors, Sagas, Middlewares and more...\nauthor: Ale Arce\nsummary: >\n          This article is aimed to show some middle level angles when using\n          Redux in the front end. Here we will cover some <b><i>non-typical</i></b>\n          actors / tools, identifying their roles and limitations. By doing\n          this, I intend to explain how important is to decouple responsibilities.\ndate: 2017-09-16 11:25:58\ntags: ['redux', 'frontend', 'js', 'javascript', 'architecture', 'selectors', 'sagas', 'middlewares']\nshare_link: http://www.alearce.io/2017/09/16/Redux-Intermediate/\n---\n## Intro\n\nIn my first post I wanted to share some appreciations I have regarding specific practices in the frontend development when implementing Redux. I will try to explain how you can<b> shape your assets in the frontend</b> so you can keep an organized structure. I will try to improve code examples gradually, from simple to more complex but robust code...\nIf I am lucky, I will receive some feedback on this and then I can perform updates on this post.\nIn several parts of the article, I point to the [Reducers Recommended Structure](#Reducers-Recommended-Structure) section, you may want to read it first and then re-read it when necessary, due this reducers structure is one of the core concepts of the article.\n\nI assume that you have basic knowledge of Redux and strong knowledge of ES6. Also I will be using React to build example components.\n## What we will cover\n<i>[Folder Structure](#Folder-Structure)</i>\n<i>[Why Smart and Dumb Components](#Why-Smart-and-Dumb-Components)</i>\n<i>[Standard Actions](#Standard-Actions)</i>\n<i>[Middlewares](#Middlewares)</i>\n<i>[Redux Selectors](#Redux-Selectors)</i>\n<i>[Reducers Recommended Structure](#Reducers-Recommended-Structure)</i>\n<i>[Store Config](#Store-Config)</i>\n\n## Folder Structure\nI found this structure very effective. By no means I intend to say it will be useful for you, but in order to understand some of the examples I provide on this post, it's necessary to see the files and folders structure, plus a brief summary of each one of them. I took this example form a previous project I was working on, I will focus on the redux-related parts:\n<p align=\"center\">![](/images/folder-structure.png)</p>\n### /actions\nContains business-entity-grouped actions. We will go deeper on this.\n### /api\nThis folder contains the API communication layer of the project.\n### /components\nDumb components, no business logic, no redux needed.\n### /constants\nI recommend to place one single file containing all the string constants representing action names. I will provide more detail for this file, and of course you may decide to have several files instead of a single one.\n### /containers\nSmart components, specific business logic, redux needed.\n### /reducers\nPretty self explanatory, reducers go here.\n### /sagas\nHere we will place the needed sagas. I will provide an explanation of redux-sagas, however, it's a quite advanced concept and I'm pretty much a beginner on this.\n### /stores\nHere we create the store, one of the key parts of Redux. We apply the middlewares to the store as well.\n\n## Why Smart and Dumb Components?\n\nOne of the most important things when using redux, is to keep in mind that you should follow a <i>\"reusable components\"</i> philosophy. More precisely, inside the Redux world most of the developers have taken an smart-components and dumb-components approach:\n\n### Smart Components\n> Those that have specific business logic and probably are specific to your app. These components <strong>use Redux</strong>, because they attach (connect) themselves to the parts of the app-state they need in order to work. This is what Redux is meant for. An example of a smart component would be a UsersListComponent, or may be a BirthdaySelectComponent.\n\n### Dumb Components\n> They are context / business agnostic, and this makes them fully reusable. So, an example of a dumb-component would be a ListComponent. This is not a UsersListComponent, or a ProductsListComponent. Dumb components don't have business knowledge, they are fully reusable as long as you provide \"the firm\" they need to render, and most importantly, <strong>they don't need Redux</strong>, because all its data is provided by some other smarter component.\n\nRedux is a framework to maintain the app's state, <strong><i>why am I talking about smart and dumb components</i></strong>?\nSmart components will use redux, dumb components won't. This is important for this article given that I'm trying to explain a way to keep your code clean. <strong><i>If all your components access the app state, your code can get messy very quickly</i></strong>.\n\n## Standard Actions\nI would describe actions as public notices, distributed within your app. This means that someone will trigger an action and some other subscribers may do something regarding that action. Pretty much like an observer pattern, but cooler. Actions must first be defined, and then they can be triggered, intercepted and analyzed to do something about them. These are examples of <strong><i>action definitions</i></strong>:\n```javascript\n// src/actions/products.js\nimport { createAction } from 'redux-actions'\n\nexport const selectProduct = createAction('PRODUCTS_SELECT', product => product.id)\nexport const fetchProducts = createAction('PRODUCTS_FETCH', () => [{name: 'P1', id: 1}, {name: 'P2', id: 2}])\n/* We will define fetchProducts soon, per now it just hardcodes an array of products as payload */\n/* This file uses some ES6 features. It may be confusing if you are not used to them */\n```\n\n<details>\n  <summary><i>A bit more detail regarding createAction</i></summary>`createAction` is a function that receives 3 parameters: `actionName`, `payloadCreator` and `metadataCreator`. I won't deepen that much on this topic, but here's a basic explanation:\n  \\- `actionName`: a string representing the identifier of the action.\n  \\- `payloadCreator`: a function definition, that will receive the arguments provided by the action invoker, and returns the payload accessible in reducers watching the action (action.payload).\n  \\- `metadataCreator`: a function definition, that will receive the arguments provided by the action invoker, and returns the metadata accessible in reducers watching the action (action.metadata).\n  Deciding if something is payload or metadata, is up to you.\n</details>\n\nNote here that actions are function definitions that expect to be invoked with some data. In this example, `selectProduct` is a function that expects to be invoked with an object, <strong><i>locally called</i></strong> product. The action definition trusts that the product will have an `id` property. As this action definition is returning `product.id`, that `id` will be the payload in the reducer subscribed to the action `PRODUCTS_SELECT`. If we want we can send the entire product to the reducer, by simply doing `product => product)`.\nIm my experience, it's very common to see `lodash` usages (`find`, `get`, `filter`, `reduce`, `first`), in these action definitions. I believe there's no problem with that. Remember, what `payloadCreator` returns, will be `action.payload` in the reducers watching for the action, and that's what you will be able to include in the app's state. We want to keep the state as dumb as possible, very simple. If we need to transform / decorate the simple data we stored in the app's state, we can do it by using [selectors](#Redux-Selectors).\n\nGiven those two defined actions, some smart component (consisting of two files), may do something like this:\n\n```javascript\n// src/containers/products/index.js\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchProducts, selectProduct } from 'actions/products'\nimport ProductsListComponent from './ProductsListComponent'\n\nlet mapStateToProps = state => ({\n  products: state.products.productsList,\n  selectedProduct: state.products.selectedProduct\n})\n\nlet mapDispatchToProps = dispatch => bindActionCreators({\n  selectProduct,\n  fetchProducts\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsListComponent)\n```\nAt this point, in the component definition has access to four props:\n* `this.props.products`: <strong>connected</strong> to `state.products.productsList`.\n\n* `this.props.selectedProduct`: <strong>connected</strong> to `state.products.selectedProduct`.\n\n* `this.props.selectProduct`: a function I can call, which will result in an action (`PRODUCTS_SELECT`)\n\n* `this.props.fetchProducts`: a function I can call, which will result in an action (`PRODUCTS_FETCH`)\n\n```javascript\n// src/containers/products/products.jsx\nimport React from 'react'\n\nclass ProductsListComponent extends React.Component {\n  componentDidMount() {\n    this.props.fetchProducts() // once mounted, we will fetch. Fetch is returning hardcoded data for now\n  }\n\n  render() {\n    return (\n      <div>\n        <ul>\n          {\n            this.props.products.map((product, key) => (\n              <li key={key} onClick={() => this.props.selectProduct(product)}>{product.name}</li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default ProductsListComponent\n```\n\n> Note that this smart component is triggering actions differently:\n* `this.props.selectProduct(product)` is triggered and it includes data for the `payloadCreator`.\n* `this.props.fetchProducts()` is triggered but it doesn't include a payload, because it's not needed so far.\n\n> <strong><i>If you want to send a payload when executing an action</i></strong>, you need to provide arguments to the function call, i.e. `this.props.myActionName({some: 'payload'}, {some: 'metadata'})`. These parameters are received by the action creators, like `product` is being received by selectProduct, which takes it and returns `product.id`. All reducers expecting for a `PRODUCTS_SELECT` action, will receive the new `id`.\n\nUntil now, we have have defined some actions and some component connections to those actions and to some parts of the state as well. The next step is <strong><i>understand the needed reducer</i></strong>, which will receive the payload and update the corresponding part of the state. By doing this, <strong><i>all the components connected to those parts of the state</i></strong>, will receive the new version of the state.\nYou may find this reducer example a bit strange, I haven't completely described my approach to reducers yet. You can [take a look at that section](#Reducers-Recommended-Structure) now if you want.\n```javascript\n// src/reducers/products.js\n\nimport { handleActions } from 'redux-actions'\nimport * as actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nconst initialState = {\n  productsList: [],\n  selectedProduct: ''\n}\n\nexport default handleActions({\n  [`${PRODUCTS.SELECT}`]: (state, action) => ({\n    ...state,\n    selectedProduct: action.payload // action.payload will be the product id provided by the action as I described earlier\n  }),\n  [`${PRODUCTS.FETCH}`]: (state, action) => ({\n    ...state,\n    productsList: action.payload // action.payload will be the hardcoded array I provided earlier\n  })\n}, initialState)\n```\nNow, the Redux cycle on this practical example:\n* A smart component is mounted and it triggers, `this.props.fetchProducts()`. No payload needed\n* The action definition for `fetchProducts` is per now returning a hardcoded list of products, that will end up in the reducer watching for the action `PRODUCTS_FETCH`.\n* The reducer updates the state with the list of products. All components connected to `state.products.productsList` will receive the update.\n  * Particularly, `products.jsx` will now iterate through the provided array instead of an empty one (initial state).\n\n## Middlewares\nMiddlewares are fragments of code you integrate to your app. <i>They work in the middle</i> of the actions pipeline, analyzing every action and deciding if they should do something about it or not, and then passing the action to the next middleware or actor in the pipeline. For this article I want to introduce the following middlewares:\n\n[Redux Thunk](https://github.com/gaearon/redux-thunk)\n[Redux Promise Middleware](https://github.com/pburtchaell/redux-promise-middleware)\n[Redux Saga](https://github.com/redux-saga/redux-saga)\n[Redux Logger](https://github.com/evgenyrodionov/redux-logger)\n\nI have found these middlewares really useful. These tools provide a mechanism to improve the actions workflow in the web app and keep it clean and logic. You can find how to include middlewares in the [store config section](#Store-Config). Let's talk about each one of them.\n### Redux Thunk\nSo far, I've been talking about [reducers returning new versions of the state](#Reducers-Recommended-Structure), i.e. returning an object. The redux-thunk middleware <strong><i>checks if the </i></strong>`payloadCreator`<strong><i> returns a function instead of a plain object</i></strong>. If the `payloadCreator` is returning a function, then the middleware invokes that function with two parameters: `dispatch` and `getState`, both functions.\nI wrote this based on the [official examples](https://github.com/gaearon/redux-thunk#motivation), the code can be improved but I wanted to leave it as explicit as possible.\n\n```javascript\n// src/actions/products.js\nimport actionTypes from 'constants/action-types'\nimport { createAction } from 'redux-actions'\n\nconst { PRODUCTS } = actionTypes\n\nconst selectProductAction = createAction('PRODUCTS_SELECT', productId => productId)\n\nexport let selectProduct = (product) => {\n  return (dispatch, getState) => { // function returned, which redux-thunk will invoke with the well-know parameters\n    const { products } = getState()\n\n    if (products.selectedProduct === product.id) {\n      return\n    }\n\n    dispatch(selectProductAction(product.id));\n  }\n}\n```\nMy goal with this example is to show the following:\n* An action to select a product is created.\n* A thunk to select a product is created as well.\n* The thunk checks if the payload provided is the same as the existing in the state.\n  * If the data is the same, it returns null (single return statement).\n  * If the data is different, then it dispatches the proper action.\n\nInstead of directly returning a payload and which will update all the related reducers, you check something to decide between executing the action or not.\n\nWhy would you select a product that is already selected? <strong><i>Redux Thunk enables you to evaluate some criteria before dispatching an action</i></strong>.\n\n### Redux Promise Middleware\nI find this middleware a bit complicated to explain, so I'll do my best.\n\nRemember that middlewares are (in part) action analyzers. In this case, to use `redux-promise-middleware`, the function `payloadCreator` needs to return an object whose only key is `promise`, and it's value is a promise instance, i.e. `{promise: promiseInstance}`.\n\n```javascript\n// src/api/products.js\nimport axios from 'axios'\n\nexport let fetchProducts = () => axios.get('https://some-api-url.com/products')\n// axios' simple way to perform a get method\n```\n\n```javascript\n// src/actions/products.js\nimport { createAction } from 'redux-actions'\nimport * as productsApi from 'api/products'\nimport actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nexport const fetchProducts = createAction(PRODUCTS.FETCH, () => {\n  const promise = productsApi.fetchProducts()\n\n  return { promise }\n})\n// Also using some ES6 features here\n```\n`Redux-promise-middleware` detects this and automatically modifies the default action pipeline, avoiding the dispatch of `PRODUCTS_FETCH`, and producing two possible results:\n* `PRODUCTS_FETCH_PENDING`\n* `PRODUCTS_FETCH_FULFILLED`\n\nOr...\n\n* `PRODUCTS_FETCH_PENDING`\n* `PRODUCTS_FETCH_REJECTED`\n\nThis two flows represent the possible states of a promise. With this, your reducers watch for actions `_PENDING`, `_FULFILLED` and `_REJECTED`.\n\nWhy is this useful? Let's see:\n* By watching `_PENDING` you can set some loading value, in order to activate spinners or loading components in your front-end.\n* By watching `_FULFILLED` you will receive in `action.payload`, the data provided by the back end response.\n* By watching `_REJECTED` you can specify error messages based on the back end response.\n\n```javascript\n// src/reducers/products.js\nimport { handleActions } from 'redux-actions'\nimport * as actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nconst initialState = {\n  productsList: [],\n  selectedProduct: '',\n  loading: false,\n  error: null\n}\n\nexport default handleActions({\n  [`${PRODUCTS.FETCH}_PENDING`]: (state, action) => ({\n    ...state,\n    loading: true,\n    productsList: [],\n    error: null\n  }),\n  [`${PRODUCTS.FETCH}_FULFILLED`]: (state, action) => ({\n    ...state,\n    loading: false,\n    productsList: action.payload.data,\n    error: null\n    // use lodash to get the data _.get(action, 'payload.data', [])\n    // remember action.payload in this case is a back-end response\n  }),\n  [`${PRODUCTS.FETCH}_REJECTED`]: (state, action) => ({\n    ...state,\n    loading: false\n    productsList: [],\n    error: `Something went wrong, ${action.payload.error.message}`,\n    // use lodash to get the data _.get(action, 'payload.error.message', null)\n    // remember action.payload in this case is a back-end response\n  })\n}, initialState)\n```\n\nWith this, your components connected to these parts of the state, can logically change their content when these actions produce a change in the state. The action `PRODUCTS_FETCH` will never be dispatched. Instead, the middleware will ensure that `PRODUCTS_FETCH_PENDING` and the corresponding `_FULFILLED` or `_REJECTED` are thrown.\nLet's see a possible component's code.\n\n```javascript\n// src/containers/products/index.js\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchProducts, selectProduct } from 'actions/products'\nimport ProductsListComponent from './ProductsListComponent'\n\nlet mapStateToProps = state => ({\n  products: state.products.productsList,\n  loading: state.products.loading, //new prop connected to the state\n  error: state.products.error, //new prop connected to the state\n  selectedProduct: state.products.selectedProduct\n})\n\nlet mapDispatchToProps = dispatch => bindActionCreators({\n  selectProduct,\n  fetchProducts\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsListComponent)\n```\n\n```javascript\n// src/containers/products/products.jsx\nimport React from 'react'\n\nclass ProductsListComponent extends React.Component {\n  componentDidMount() {\n    this.props.fetchProducts()\n  }\n\n  getProducts() {\n    return (\n      <ul>\n        {\n          this.props.products.map((product, key) => (\n            <li key={key} onClick={() => this.props.selectProduct(product)}>{product.name}</li>\n          ))\n        }\n      </ul>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.loading && 'loading component'}\n        {this.props.error && `Oops... ${error}`}\n        {this.props.products.length > 0 && this.getProducts()}\n      </div>\n    )\n  }\n}\n\nexport default ProductsListComponent\n```\n\nThis last example requires at least an intermediate knowledge of ES6.\n\n### Redux Saga\nI believe Sagas is a quite advanced concept, so I will be giving some very basic approach to understand what they do, and how to implement them.\nUntil now, we went through the main actors of Redux. If I was clear enough, you we can agree that so far, the only listeners / watchers of actions, are the reducers. The goal of a reducer is modify a specific part of the app's state. I would describe a Redux Saga as actions watchers as well, but in this case they do not modify the app's state. What a saga does, is to execute some code after an action is dispatched. This is useful in some specific cases:\n* Given an action:\n  * You want to dispatch another specific action, or several actions.\n  * You want to change the url.\n  * You want to store something in sessionStorage.\n  * etc...\n\nI will take the first case as an example to show you how to use Redux Sagas. Let's continue with the last example of `products/index.js` and `products/products.jsx`.\nSo far, when `state.products.productsList` is an array of products, `products.jsx` will render an `ul > li` of products. With the current code, clicking on any of those `li` will trigger a `PRODUCT_SELECT` action. Let's put a class on the selected `li`:\n\n```javascript\ngetProducts() {\n  return (\n    <ul>\n      {\n        this.props.products.map((product, key) => (\n          <li className={this.props.selectedProduct === product.id ? 'selected' : ''} key={key} onClick={() => this.props.selectProduct(product)}>\n            {product.name}\n          </li>\n        ))\n      }\n    </ul>\n  )\n}\n```\n<small>You can use [classNames](https://github.com/JedWatson/classnames) to correctly implement a logical className approach. I just want to keep this as a stand alone example.</small>\nNow, you can style that `.selected` class to see the result. But we have a problem, what happens on the first load, before any click? `state.products.selectedProduct` is an empty string, so at the beginning, no product will be selected. Let's suppose we want to select the first product by default, when the list loads. We have at least two ways to do it:\n\nModify the reducer, so with the `_FULFILLED` action not only the `productsList` will be returned, but also `selectedProduct`:\n```javascript\n[`${PRODUCTS.FETCH}_FULFILLED`]: (state, action) => ({\n  ...state,\n  loading: false,\n  productsList: action.payload.data,\n  error: null,\n  selectedProduct: action.payload.data[0].id\n  // if data is an empty array, this will cause problems\n})\n```\n\nOr, in the other hand, we can take advantage of this case to implement Redux Sagas and properly dispatch a `PRODUCT_SELECT` action after a `PRODUCTS_FETCH_FULFILLED` action is completed:\n```javascript\n// src/sagas/index.js\nimport { fork } from 'redux-saga/effects'\nimport { watchProductsFetchFulfilled } from './products'\n\nexport default function* rootSaga() {\n  yield fork(watchProductsFetchFulfilled)\n}\n// this code can grow very quickly so there may be a better organization than the present one...\n```\n```javascript\nimport { takeLatest } from 'redux-saga'\nimport { select, put } from 'redux-saga/effects'\nimport { selectProduct } from 'actions/products'\nimport actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nexport function* selectProductAfterProductsFulfilled() {\n  const { products } = yield select() // select function is like getState()\n\n  if (products.productsList.length > 0) {\n    yield put(selectProduct(products.productsList[0].id)) // puts a new action on the flow\n  }\n}\n\nexport function* watchProductsFetchFulfilled() {\n  yield* takeLatest(\n    [`${PRODUCTS.FETCH}_FULFILLED`, /* Other actions you want to watch */],\n    selectProductAfterProductsFulfilled\n  )\n}\n```\nRedux sagas use [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function%2A), which is an entire concept by itself, so I won't go deeper on this.\n\n### Redux Logger\nThis middleware is not precisely the most functional one, but in the development phase, I think it's a great resource. Basically what offers you is a console output, directly on the browser. There are several other tools that do the same and much more, [redux-devtools](https://github.com/gaearon/redux-devtools) for example, but I wanted to mention [Redux Logger](https://github.com/evgenyrodionov/redux-logger) given that it's quite comfortable for me in development.\nThe result you will accomplish is something like this:\n<p align=\"center\">![](/images/redux-logger.png)</p>\nYou can configure the action log to be collapsed / expanded by default. You can check the entire list of actions being dispatched, the app's state before and after, and also the payload of each action. I find this quite cool.\n\nTo implement this middleware, you just have to [include it in your store](#Store-Config).\n\n\n## Redux Selectors\nI wanted to introduce the concept of selectors because they are really helpful to keep our code decoupled and our components clean.\nLet's suppose you receive a list of products like this one:\n```javascript\n[{\n  name: 'apples',\n  id: 1,\n  harvested: '2017-08-12T20:17:46.384Z'\n},\n{\n  name: 'pears',\n  id: 2,\n  harvested: '2017-07-11T20:15:03.204Z'\n}]\n```\nThis array would be in your `state.products.productsList` after a `_FULFILLED` action is dispatched. To display the dates, probably you will want to format their values using [moment](https://www.npmjs.com/package/moment), and you would be tempted to do so inside the component:\n\n```javascript\nlet mapStateToProps = state => ({\n  products: state.products.productsList.map(({name, id, harvested}) => ({\n    name,\n    id,\n    harvested: moment('2017-07-11T20:15:03.204Z').format('YYYY-MM-DD')\n  })),\n  loading: state.products.loading, //new prop connected to the state\n  error: state.products.error, //new prop connected to the state\n  selectedProduct: state.products.selectedProduct\n  // not the cool way\n})\n```\nThis is, creating a new array of all the products but with each date formatted, inside `mapStateToProps`. The method `mapStateToProps` should be, as it's name stands, a simple map between the state and the component's props. But here the component should not be <strong><i>decorating</i></strong> or <strong><i>calculating</i></strong> anything.\nIf you keep transforming / decorating inside your components, your code can quickly get messy. Keeping in mind that the app's state must remain as simple as we can, <strong><i>all the transformation, calculation and decoration of data will be done in selectors</i></strong>.\n\nSelectors can be just functions that receive the state, perform all the needed work, and return the result to the components. That would be the same thing I just described but with the function definition somewhere else.\nWe will use a better approach, implementing `createSelector`, a method provided by the library [reselect](https://github.com/reactjs/reselect). By doing this, our selectors will be [memoized](https://github.com/reactjs/reselect#motivation-for-memoized-selectors), which basically means that our selector functions will be executed only when a part of the state they are watching changes (i.e. they will be executed only when needed).\n\n```javascript\n// src/selectors/products.js\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\n\nconst selectProductsList = state => state.products.productsList\nconst selectSelectedProduct = state => state.products.selectedProduct\n\nexport const getProductsList = createSelector(\n  [selectProductsList],\n  productsList => productsList.map(({name, id, harvested}) => ({\n    name,\n    id,\n    harvested: moment('2017-07-11T20:15:03.204Z').format('YYYY-MM-DD')\n  }))\n)\n\nexport const getSelectedProduct = createSelector(\n  [selectProductsList, selectSelectedProduct],\n  (productsList, selectedProduct) => productsList.find(product => product.id === selectedProduct)\n)\n```\n\nAnd then, your smart component would pass the state to the selector methods, connecting to a <strong><i>decorated / calculated</i></strong> part of the state.\n\n```javascript\n// your mapStateToProps method\nimport { getSelectedProduct, getProductsList } from 'selectors/products'\n// ...\nlet mapStateToProps = state => ({\n  products: getProductsList(state),\n  loading: state.products.loading, //new prop connected to the state\n  error: state.products.error, //new prop connected to the state\n  selectedProduct: getSelectedProduct(state)\n})\n```\nWith this, we have implemented a selector to transform our dates, but also we included `getSelectedProduct`, which is a selector that calculates the selected product object (with all it's data, not only the `id` as we had before). The state remains simple and it doesn't repeat data. The selector functions, based on that simple data, decorate and calculate new data, and then provides it to the components.\nTo conclude the example, our component render method would change from:\n```javascript\n<li className={this.props.selectedProduct === product.id ? 'selected' : ''} key={key} onClick={() =>\n```\n```javascript\n<li className={this.props.selectedProduct.id === product.id ? 'selected' : ''} key={key} onClick={() =>\n  // this.props.selectedProduct is now an object\n```\n\n## Reducers Recommended Structure\nIn first place, I've seen a lot code like this:\n```javascript\n// src/reducers/products.js\nlet productsReducer = (state = {productsList: [], selectedProduct: ''}, action) => {\n  switch (action.type) {\n    case 'PRODUCTS_RECEIVED':\n      return {\n        ...state,\n        productsList: action.payload\n      }\n    case 'PRODUCTS_SELECT':\n      return {\n        ...state,\n        selectedProduct: action.payload\n      }\n    default:\n      return state\n  }\n}\n```\nFirst issue, your action types are completely hardcoded. Second, you are using a switch. Third, which is your initial state? It's the `{productsList: [], selectedProduct: ''}` fragment, really long line if your initial state grows, and not clear to see if some new dev enters to the team...\nIn addition, let's suppose your back end returns your products like this:\n```javascript\n{\n  ...\n  data: {\n    main: {\n      result: {\n        array_data: {\n          data: [{\n            product: 'apples',\n            harvested: '2017-08-12T20:17:46.384Z'\n          },\n          {\n            test: 'pears',\n            harvested: '2017-07-11T20:15:03.204Z'\n          }]\n        }\n      }\n    }\n  }\n  ...\n}\n```\nYou may find this rare or impossible. Trust me, API responses can be even worst than this. In this case, your state would receive a deeply nested object as data... Not cool at all.\n\nI think that these reasons are enough to provide some advice in the Reducers structure.\n\nIn first place, define an action-names-constants-file at a project level, your actions names will be defined there. Here's a simple constants file defining actions:\n```javascript\n// src/constants/action-types.js\nexport const PRODUCTS_FETCH = 'PRODUCTS_FETCH'\nexport const PRODUCTS_SELECT = 'PRODUCTS_SELECT'\n```\n\nBut I would advice to do something like this instead:\n```javascript\n// src/constants/action-types.js\nimport keyMirror from 'key-mirror-nested'\n\nexport default keyMirror({\n  PRODUCTS: {\n    FETCH: null,\n    SELECT: null\n  }\n}, { connChar: '_' })\n```\n<details>\n  <summary><i>Brief explanation</i></summary>[key-mirror-nested](https://github.com/apolkingg8/KeyMirrorNested) is a library I find very useful for this case. Here I export an object with one key, `PRODUCTS`, and if you try `PRODUCTS.FETCH`, that object will have the value `PRODUCTS_FETCH`. So that's the constant I need. Notice that I used underscore as `connChar`, you can use whatever you prefer.\n</details>\n\nAnd then your reducer would be something like:\n\n```javascript\n// src/reducers/products.js\nimport { handleActions } from 'redux-actions'\nimport * as actionTypes from 'constants/action-types'\n\nconst { PRODUCTS } = actionTypes\n\nconst initialState = {\n  productsList: [],\n  selectedProduct: ''\n}\n\nexport default handleActions({\n  [`${PRODUCTS.SELECT}`]: (state, action) => ({\n    ...state,\n    selectedProduct: action.payload\n  }),\n  [`${PRODUCTS.FETCH}`]: (state, action) => ({\n    ...state,\n    productsList: action.payload\n  })\n}, initialState)\n```\n\nBy doing this\n* The initial state is very clear\n* Action types are not hardcoded\n* We are using an object notation instead of a switch\n* And we are clearly resolving the deeply nested problem the API may be sending us.\n\nFinally, I recommend to have `src/reducers/index.js` to centralize all your reducers and keep a clear idea of your state:\n\n```javascript\n// src/reducers/index.js\nimport { combineReducers } from 'redux'\nimport products from './products'\n\nexport default combineReducers({\n  products\n  // other reducers\n})\n```\nThis file will then be consumed when we [configure our store](#Store-Config).\n\n## Store Config\nThis is just an example of how to declare your store. You may find better / cleaner ways to do it. I believe this part of code was needed in the article, given that I mention so many things regarding middlewares. The configureStore is where you reference your `reducers/index.js` file, creating the store with the data you defined in your reducers, and attaching all the middlewares you want to the actions pipeline.\n\n```javascript\n// src/stores/configureStore.js\nimport 'babel-polyfill'\n\nimport { createStore, applyMiddleware } from 'redux'\nimport createLogger from 'redux-logger'\nimport { browserHistory } from 'react-router'\nimport { routerMiddleware } from 'react-router-redux'\nimport promiseMiddleware from 'redux-promise-middleware'\nimport createSagaMiddleware from 'redux-saga'\nimport thunkMiddleware from 'redux-thunk'\n\nimport indexReducer from 'reducers/index'\nimport rootSaga from 'sagas/index'\n\nconst logger = createLogger({ collapsed: true })\nconst router = routerMiddleware(browserHistory)\nconst promise = promiseMiddleware()\nconst saga = createSagaMiddleware()\n\nconst createStoreWithMiddleware = applyMiddleware(\n    router,\n    logger,\n    promise,\n    saga,\n    thunkMiddleware)(createStore)\n\nexport let configureStore = () => {\n  const store = createStoreWithMiddleware(rootReducer, {})\n  saga.run(rootSaga)\n  return store\n}\n```\n\nThen you can have an `index.jsx` file, which will simply import the `configureSture` function exported by `configureStore.js`:\n\n```javascript\nimport ReactDOM from 'react-dom'\nimport { configureStore } from './stores/configureStore'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n  </Provider>,\n  document.getElementById('yourRootElementId')\n)\n```\n","slug":"Redux-Intermediate","published":1,"updated":"2017-09-19T15:04:17.000Z","_id":"cj7nts0u6000091lrk0w24euc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>In my first post I wanted to share some appreciations I have regarding specific practices in the frontend development when implementing Redux. I will try to explain how you can<b> shape your assets in the frontend</b> so you can keep an organized structure. I will try to improve code examples gradually, from simple to more complex but robust code…<br>If I am lucky, I will receive some feedback on this and then I can perform updates on this post.<br>In several parts of the article, I point to the <a href=\"#Reducers-Recommended-Structure\">Reducers Recommended Structure</a> section, you may want to read it first and then re-read it when necessary, due this reducers structure is one of the core concepts of the article.</p>\n<p>I assume that you have basic knowledge of Redux and strong knowledge of ES6. Also I will be using React to build example components.</p>\n<h2 id=\"What-we-will-cover\"><a href=\"#What-we-will-cover\" class=\"headerlink\" title=\"What we will cover\"></a>What we will cover</h2><p><i><a href=\"#Folder-Structure\">Folder Structure</a></i><br><i><a href=\"#Why-Smart-and-Dumb-Components\">Why Smart and Dumb Components</a></i><br><i><a href=\"#Standard-Actions\">Standard Actions</a></i><br><i><a href=\"#Middlewares\">Middlewares</a></i><br><i><a href=\"#Redux-Selectors\">Redux Selectors</a></i><br><i><a href=\"#Reducers-Recommended-Structure\">Reducers Recommended Structure</a></i><br><i><a href=\"#Store-Config\">Store Config</a></i></p>\n<h2 id=\"Folder-Structure\"><a href=\"#Folder-Structure\" class=\"headerlink\" title=\"Folder Structure\"></a>Folder Structure</h2><p>I found this structure very effective. By no means I intend to say it will be useful for you, but in order to understand some of the examples I provide on this post, it’s necessary to see the files and folders structure, plus a brief summary of each one of them. I took this example form a previous project I was working on, I will focus on the redux-related parts:</p>\n<p></p><p align=\"center\"><img src=\"/images/folder-structure.png\" alt=\"\"></p><p></p>\n<h3 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"/actions\"></a>/actions</h3><p>Contains business-entity-grouped actions. We will go deeper on this.</p>\n<h3 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"/api\"></a>/api</h3><p>This folder contains the API communication layer of the project.</p>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"/components\"></a>/components</h3><p>Dumb components, no business logic, no redux needed.</p>\n<h3 id=\"constants\"><a href=\"#constants\" class=\"headerlink\" title=\"/constants\"></a>/constants</h3><p>I recommend to place one single file containing all the string constants representing action names. I will provide more detail for this file, and of course you may decide to have several files instead of a single one.</p>\n<h3 id=\"containers\"><a href=\"#containers\" class=\"headerlink\" title=\"/containers\"></a>/containers</h3><p>Smart components, specific business logic, redux needed.</p>\n<h3 id=\"reducers\"><a href=\"#reducers\" class=\"headerlink\" title=\"/reducers\"></a>/reducers</h3><p>Pretty self explanatory, reducers go here.</p>\n<h3 id=\"sagas\"><a href=\"#sagas\" class=\"headerlink\" title=\"/sagas\"></a>/sagas</h3><p>Here we will place the needed sagas. I will provide an explanation of redux-sagas, however, it’s a quite advanced concept and I’m pretty much a beginner on this.</p>\n<h3 id=\"stores\"><a href=\"#stores\" class=\"headerlink\" title=\"/stores\"></a>/stores</h3><p>Here we create the store, one of the key parts of Redux. We apply the middlewares to the store as well.</p>\n<h2 id=\"Why-Smart-and-Dumb-Components\"><a href=\"#Why-Smart-and-Dumb-Components\" class=\"headerlink\" title=\"Why Smart and Dumb Components?\"></a>Why Smart and Dumb Components?</h2><p>One of the most important things when using redux, is to keep in mind that you should follow a <i>“reusable components”</i> philosophy. More precisely, inside the Redux world most of the developers have taken an smart-components and dumb-components approach:</p>\n<h3 id=\"Smart-Components\"><a href=\"#Smart-Components\" class=\"headerlink\" title=\"Smart Components\"></a>Smart Components</h3><blockquote>\n<p>Those that have specific business logic and probably are specific to your app. These components <strong>use Redux</strong>, because they attach (connect) themselves to the parts of the app-state they need in order to work. This is what Redux is meant for. An example of a smart component would be a UsersListComponent, or may be a BirthdaySelectComponent.</p>\n</blockquote>\n<h3 id=\"Dumb-Components\"><a href=\"#Dumb-Components\" class=\"headerlink\" title=\"Dumb Components\"></a>Dumb Components</h3><blockquote>\n<p>They are context / business agnostic, and this makes them fully reusable. So, an example of a dumb-component would be a ListComponent. This is not a UsersListComponent, or a ProductsListComponent. Dumb components don’t have business knowledge, they are fully reusable as long as you provide “the firm” they need to render, and most importantly, <strong>they don’t need Redux</strong>, because all its data is provided by some other smarter component.</p>\n</blockquote>\n<p>Redux is a framework to maintain the app’s state, <strong><i>why am I talking about smart and dumb components</i></strong>?<br>Smart components will use redux, dumb components won’t. This is important for this article given that I’m trying to explain a way to keep your code clean. <strong><i>If all your components access the app state, your code can get messy very quickly</i></strong>.</p>\n<h2 id=\"Standard-Actions\"><a href=\"#Standard-Actions\" class=\"headerlink\" title=\"Standard Actions\"></a>Standard Actions</h2><p>I would describe actions as public notices, distributed within your app. This means that someone will trigger an action and some other subscribers may do something regarding that action. Pretty much like an observer pattern, but cooler. Actions must first be defined, and then they can be triggered, intercepted and analyzed to do something about them. These are examples of <strong><i>action definitions</i></strong>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/actions/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> selectProduct = createAction(<span class=\"string\">'PRODUCTS_SELECT'</span>, product =&gt; product.id)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchProducts = createAction(<span class=\"string\">'PRODUCTS_FETCH'</span>, () =&gt; [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'P1'</span>, <span class=\"attr\">id</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'P2'</span>, <span class=\"attr\">id</span>: <span class=\"number\">2</span>&#125;])</div><div class=\"line\"><span class=\"comment\">/* We will define fetchProducts soon, per now it just hardcodes an array of products as payload */</span></div><div class=\"line\"><span class=\"comment\">/* This file uses some ES6 features. It may be confusing if you are not used to them */</span></div></pre></td></tr></table></figure></p>\n<details><br>  <summary><i>A bit more detail regarding createAction</i></summary><code>createAction</code> is a function that receives 3 parameters: <code>actionName</code>, <code>payloadCreator</code> and <code>metadataCreator</code>. I won’t deepen that much on this topic, but here’s a basic explanation:<br>  - <code>actionName</code>: a string representing the identifier of the action.<br>  - <code>payloadCreator</code>: a function definition, that will receive the arguments provided by the action invoker, and returns the payload accessible in reducers watching the action (action.payload).<br>  - <code>metadataCreator</code>: a function definition, that will receive the arguments provided by the action invoker, and returns the metadata accessible in reducers watching the action (action.metadata).<br>  Deciding if something is payload or metadata, is up to you.<br></details>\n\n<p>Note here that actions are function definitions that expect to be invoked with some data. In this example, <code>selectProduct</code> is a function that expects to be invoked with an object, <strong><i>locally called</i></strong> product. The action definition trusts that the product will have an <code>id</code> property. As this action definition is returning <code>product.id</code>, that <code>id</code> will be the payload in the reducer subscribed to the action <code>PRODUCTS_SELECT</code>. If we want we can send the entire product to the reducer, by simply doing <code>product =&gt; product)</code>.<br>Im my experience, it’s very common to see <code>lodash</code> usages (<code>find</code>, <code>get</code>, <code>filter</code>, <code>reduce</code>, <code>first</code>), in these action definitions. I believe there’s no problem with that. Remember, what <code>payloadCreator</code> returns, will be <code>action.payload</code> in the reducers watching for the action, and that’s what you will be able to include in the app’s state. We want to keep the state as dumb as possible, very simple. If we need to transform / decorate the simple data we stored in the app’s state, we can do it by using <a href=\"#Redux-Selectors\">selectors</a>.</p>\n<p>Given those two defined actions, some smart component (consisting of two files), may do something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/containers/products/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; bindActionCreators &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fetchProducts, selectProduct &#125; <span class=\"keyword\">from</span> <span class=\"string\">'actions/products'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ProductsListComponent <span class=\"keyword\">from</span> <span class=\"string\">'./ProductsListComponent'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</div><div class=\"line\">  products: state.products.productsList,</div><div class=\"line\">  selectedProduct: state.products.selectedProduct</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapDispatchToProps = <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> bindActionCreators(&#123;</div><div class=\"line\">  selectProduct,</div><div class=\"line\">  fetchProducts</div><div class=\"line\">&#125;, dispatch)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(ProductsListComponent)</div></pre></td></tr></table></figure>\n<p>At this point, in the component definition has access to four props:</p>\n<ul>\n<li><p><code>this.props.products</code>: <strong>connected</strong> to <code>state.products.productsList</code>.</p>\n</li>\n<li><p><code>this.props.selectedProduct</code>: <strong>connected</strong> to <code>state.products.selectedProduct</code>.</p>\n</li>\n<li><p><code>this.props.selectProduct</code>: a function I can call, which will result in an action (<code>PRODUCTS_SELECT</code>)</p>\n</li>\n<li><p><code>this.props.fetchProducts</code>: a function I can call, which will result in an action (<code>PRODUCTS_FETCH</code>)</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/containers/products/products.jsx</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductsListComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.fetchProducts() <span class=\"comment\">// once mounted, we will fetch. Fetch is returning hardcoded data for now</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.props.products.map(<span class=\"function\">(<span class=\"params\">product, key</span>) =&gt;</span> (</div><div class=\"line\">              &lt;li key=&#123;key&#125; onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.props.selectProduct(product)&#125;&gt;&#123;product.name&#125;&lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\">            ))</span></div><div class=\"line\"><span class=\"regexp\">          &#125;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;/u</span>l&gt;</div><div class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">    )</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">export default ProductsListComponent</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note that this smart component is triggering actions differently:</p>\n<ul>\n<li><code>this.props.selectProduct(product)</code> is triggered and it includes data for the <code>payloadCreator</code>.</li>\n<li><code>this.props.fetchProducts()</code> is triggered but it doesn’t include a payload, because it’s not needed so far.</li>\n</ul>\n<p><strong><i>If you want to send a payload when executing an action</i></strong>, you need to provide arguments to the function call, i.e. <code>this.props.myActionName({some: &#39;payload&#39;}, {some: &#39;metadata&#39;})</code>. These parameters are received by the action creators, like <code>product</code> is being received by selectProduct, which takes it and returns <code>product.id</code>. All reducers expecting for a <code>PRODUCTS_SELECT</code> action, will receive the new <code>id</code>.</p>\n</blockquote>\n<p>Until now, we have have defined some actions and some component connections to those actions and to some parts of the state as well. The next step is <strong><i>understand the needed reducer</i></strong>, which will receive the payload and update the corresponding part of the state. By doing this, <strong><i>all the components connected to those parts of the state</i></strong>, will receive the new version of the state.<br>You may find this reducer example a bit strange, I haven’t completely described my approach to reducers yet. You can <a href=\"#Reducers-Recommended-Structure\">take a look at that section</a> now if you want.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/products.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; handleActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">  productsList: [],</div><div class=\"line\">  selectedProduct: <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> handleActions(&#123;</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.SELECT&#125;</span>`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    selectedProduct: action.payload <span class=\"comment\">// action.payload will be the product id provided by the action as I described earlier</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    productsList: action.payload <span class=\"comment\">// action.payload will be the hardcoded array I provided earlier</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;, initialState)</div></pre></td></tr></table></figure></p>\n<p>Now, the Redux cycle on this practical example:</p>\n<ul>\n<li>A smart component is mounted and it triggers, <code>this.props.fetchProducts()</code>. No payload needed</li>\n<li>The action definition for <code>fetchProducts</code> is per now returning a hardcoded list of products, that will end up in the reducer watching for the action <code>PRODUCTS_FETCH</code>.</li>\n<li>The reducer updates the state with the list of products. All components connected to <code>state.products.productsList</code> will receive the update.<ul>\n<li>Particularly, <code>products.jsx</code> will now iterate through the provided array instead of an empty one (initial state).</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Middlewares\"><a href=\"#Middlewares\" class=\"headerlink\" title=\"Middlewares\"></a>Middlewares</h2><p>Middlewares are fragments of code you integrate to your app. <i>They work in the middle</i> of the actions pipeline, analyzing every action and deciding if they should do something about it or not, and then passing the action to the next middleware or actor in the pipeline. For this article I want to introduce the following middlewares:</p>\n<p><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\">Redux Thunk</a><br><a href=\"https://github.com/pburtchaell/redux-promise-middleware\" target=\"_blank\" rel=\"external\">Redux Promise Middleware</a><br><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\" rel=\"external\">Redux Saga</a><br><a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\" rel=\"external\">Redux Logger</a></p>\n<p>I have found these middlewares really useful. These tools provide a mechanism to improve the actions workflow in the web app and keep it clean and logic. You can find how to include middlewares in the <a href=\"#Store-Config\">store config section</a>. Let’s talk about each one of them.</p>\n<h3 id=\"Redux-Thunk\"><a href=\"#Redux-Thunk\" class=\"headerlink\" title=\"Redux Thunk\"></a>Redux Thunk</h3><p>So far, I’ve been talking about <a href=\"#Reducers-Recommended-Structure\">reducers returning new versions of the state</a>, i.e. returning an object. The redux-thunk middleware <strong><i>checks if the </i></strong><code>payloadCreator</code><strong><i> returns a function instead of a plain object</i></strong>. If the <code>payloadCreator</code> is returning a function, then the middleware invokes that function with two parameters: <code>dispatch</code> and <code>getState</code>, both functions.<br>I wrote this based on the <a href=\"https://github.com/gaearon/redux-thunk#motivation\" target=\"_blank\" rel=\"external\">official examples</a>, the code can be improved but I wanted to leave it as explicit as possible.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/actions/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> selectProductAction = createAction(<span class=\"string\">'PRODUCTS_SELECT'</span>, productId =&gt; productId)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> selectProduct = <span class=\"function\">(<span class=\"params\">product</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState</span>) =&gt;</span> &#123; <span class=\"comment\">// function returned, which redux-thunk will invoke with the well-know parameters</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; products &#125; = getState()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (products.selectedProduct === product.id) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dispatch(selectProductAction(product.id));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>My goal with this example is to show the following:</p>\n<ul>\n<li>An action to select a product is created.</li>\n<li>A thunk to select a product is created as well.</li>\n<li>The thunk checks if the payload provided is the same as the existing in the state.<ul>\n<li>If the data is the same, it returns null (single return statement).</li>\n<li>If the data is different, then it dispatches the proper action.</li>\n</ul>\n</li>\n</ul>\n<p>Instead of directly returning a payload and which will update all the related reducers, you check something to decide between executing the action or not.</p>\n<p>Why would you select a product that is already selected? <strong><i>Redux Thunk enables you to evaluate some criteria before dispatching an action</i></strong>.</p>\n<h3 id=\"Redux-Promise-Middleware\"><a href=\"#Redux-Promise-Middleware\" class=\"headerlink\" title=\"Redux Promise Middleware\"></a>Redux Promise Middleware</h3><p>I find this middleware a bit complicated to explain, so I’ll do my best.</p>\n<p>Remember that middlewares are (in part) action analyzers. In this case, to use <code>redux-promise-middleware</code>, the function <code>payloadCreator</code> needs to return an object whose only key is <code>promise</code>, and it’s value is a promise instance, i.e. <code>{promise: promiseInstance}</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/api/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> fetchProducts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> axios.get(<span class=\"string\">'https://some-api-url.com/products'</span>)</div><div class=\"line\"><span class=\"comment\">// axios' simple way to perform a get method</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/actions/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> productsApi <span class=\"keyword\">from</span> <span class=\"string\">'api/products'</span></div><div class=\"line\"><span class=\"keyword\">import</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchProducts = createAction(PRODUCTS.FETCH, () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> promise = productsApi.fetchProducts()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; promise &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// Also using some ES6 features here</span></div></pre></td></tr></table></figure>\n<p><code>Redux-promise-middleware</code> detects this and automatically modifies the default action pipeline, avoiding the dispatch of <code>PRODUCTS_FETCH</code>, and producing two possible results:</p>\n<ul>\n<li><code>PRODUCTS_FETCH_PENDING</code></li>\n<li><code>PRODUCTS_FETCH_FULFILLED</code></li>\n</ul>\n<p>Or…</p>\n<ul>\n<li><code>PRODUCTS_FETCH_PENDING</code></li>\n<li><code>PRODUCTS_FETCH_REJECTED</code></li>\n</ul>\n<p>This two flows represent the possible states of a promise. With this, your reducers watch for actions <code>_PENDING</code>, <code>_FULFILLED</code> and <code>_REJECTED</code>.</p>\n<p>Why is this useful? Let’s see:</p>\n<ul>\n<li>By watching <code>_PENDING</code> you can set some loading value, in order to activate spinners or loading components in your front-end.</li>\n<li>By watching <code>_FULFILLED</code> you will receive in <code>action.payload</code>, the data provided by the back end response.</li>\n<li>By watching <code>_REJECTED</code> you can specify error messages based on the back end response.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; handleActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">  productsList: [],</div><div class=\"line\">  selectedProduct: <span class=\"string\">''</span>,</div><div class=\"line\">  loading: <span class=\"literal\">false</span>,</div><div class=\"line\">  error: <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> handleActions(&#123;</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_PENDING`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    loading: <span class=\"literal\">true</span>,</div><div class=\"line\">    productsList: [],</div><div class=\"line\">    error: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_FULFILLED`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    loading: <span class=\"literal\">false</span>,</div><div class=\"line\">    productsList: action.payload.data,</div><div class=\"line\">    error: <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">// use lodash to get the data _.get(action, 'payload.data', [])</span></div><div class=\"line\">    <span class=\"comment\">// remember action.payload in this case is a back-end response</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_REJECTED`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    loading: <span class=\"literal\">false</span></div><div class=\"line\">    productsList: [],</div><div class=\"line\">    error: <span class=\"string\">`Something went wrong, <span class=\"subst\">$&#123;action.payload.error.message&#125;</span>`</span>,</div><div class=\"line\">    <span class=\"comment\">// use lodash to get the data _.get(action, 'payload.error.message', null)</span></div><div class=\"line\">    <span class=\"comment\">// remember action.payload in this case is a back-end response</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;, initialState)</div></pre></td></tr></table></figure>\n<p>With this, your components connected to these parts of the state, can logically change their content when these actions produce a change in the state. The action <code>PRODUCTS_FETCH</code> will never be dispatched. Instead, the middleware will ensure that <code>PRODUCTS_FETCH_PENDING</code> and the corresponding <code>_FULFILLED</code> or <code>_REJECTED</code> are thrown.<br>Let’s see a possible component’s code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/containers/products/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; bindActionCreators &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fetchProducts, selectProduct &#125; <span class=\"keyword\">from</span> <span class=\"string\">'actions/products'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ProductsListComponent <span class=\"keyword\">from</span> <span class=\"string\">'./ProductsListComponent'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</div><div class=\"line\">  products: state.products.productsList,</div><div class=\"line\">  loading: state.products.loading, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  error: state.products.error, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  selectedProduct: state.products.selectedProduct</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapDispatchToProps = <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> bindActionCreators(&#123;</div><div class=\"line\">  selectProduct,</div><div class=\"line\">  fetchProducts</div><div class=\"line\">&#125;, dispatch)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(ProductsListComponent)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/containers/products/products.jsx</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductsListComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.fetchProducts()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  getProducts() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;ul&gt;</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.props.products.map(<span class=\"function\">(<span class=\"params\">product, key</span>) =&gt;</span> (</div><div class=\"line\">            &lt;li key=&#123;key&#125; onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.props.selectProduct(product)&#125;&gt;&#123;product.name&#125;&lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\">          ))</span></div><div class=\"line\"><span class=\"regexp\">        &#125;</span></div><div class=\"line\"><span class=\"regexp\">      &lt;/u</span>l&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.loading &amp;&amp; <span class=\"string\">'loading component'</span>&#125;</div><div class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.error &amp;&amp; <span class=\"string\">`Oops... <span class=\"subst\">$&#123;error&#125;</span>`</span>&#125;</div><div class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.products.length &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"keyword\">this</span>.getProducts()&#125;</div><div class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">    )</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">export default ProductsListComponent</span></div></pre></td></tr></table></figure>\n<p>This last example requires at least an intermediate knowledge of ES6.</p>\n<h3 id=\"Redux-Saga\"><a href=\"#Redux-Saga\" class=\"headerlink\" title=\"Redux Saga\"></a>Redux Saga</h3><p>I believe Sagas is a quite advanced concept, so I will be giving some very basic approach to understand what they do, and how to implement them.<br>Until now, we went through the main actors of Redux. If I was clear enough, you we can agree that so far, the only listeners / watchers of actions, are the reducers. The goal of a reducer is modify a specific part of the app’s state. I would describe a Redux Saga as actions watchers as well, but in this case they do not modify the app’s state. What a saga does, is to execute some code after an action is dispatched. This is useful in some specific cases:</p>\n<ul>\n<li>Given an action:<ul>\n<li>You want to dispatch another specific action, or several actions.</li>\n<li>You want to change the url.</li>\n<li>You want to store something in sessionStorage.</li>\n<li>etc…</li>\n</ul>\n</li>\n</ul>\n<p>I will take the first case as an example to show you how to use Redux Sagas. Let’s continue with the last example of <code>products/index.js</code> and <code>products/products.jsx</code>.<br>So far, when <code>state.products.productsList</code> is an array of products, <code>products.jsx</code> will render an <code>ul &gt; li</code> of products. With the current code, clicking on any of those <code>li</code> will trigger a <code>PRODUCT_SELECT</code> action. Let’s put a class on the selected <code>li</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">getProducts() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.products.map(<span class=\"function\">(<span class=\"params\">product, key</span>) =&gt;</span> (</div><div class=\"line\">          &lt;li className=&#123;<span class=\"keyword\">this</span>.props.selectedProduct === product.id ? <span class=\"string\">'selected'</span> : <span class=\"string\">''</span>&#125; key=&#123;key&#125; onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.props.selectProduct(product)&#125;&gt;</div><div class=\"line\">            &#123;product.name&#125;</div><div class=\"line\">          &lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\">        ))</span></div><div class=\"line\"><span class=\"regexp\">      &#125;</span></div><div class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><small>You can use <a href=\"https://github.com/JedWatson/classnames\" target=\"_blank\" rel=\"external\">classNames</a> to correctly implement a logical className approach. I just want to keep this as a stand alone example.</small><br>Now, you can style that <code>.selected</code> class to see the result. But we have a problem, what happens on the first load, before any click? <code>state.products.selectedProduct</code> is an empty string, so at the beginning, no product will be selected. Let’s suppose we want to select the first product by default, when the list loads. We have at least two ways to do it:</p>\n<p>Modify the reducer, so with the <code>_FULFILLED</code> action not only the <code>productsList</code> will be returned, but also <code>selectedProduct</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_FULFILLED`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">  ...state,</div><div class=\"line\">  loading: <span class=\"literal\">false</span>,</div><div class=\"line\">  productsList: action.payload.data,</div><div class=\"line\">  error: <span class=\"literal\">null</span>,</div><div class=\"line\">  selectedProduct: action.payload.data[<span class=\"number\">0</span>].id</div><div class=\"line\">  <span class=\"comment\">// if data is an empty array, this will cause problems</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Or, in the other hand, we can take advantage of this case to implement Redux Sagas and properly dispatch a <code>PRODUCT_SELECT</code> action after a <code>PRODUCTS_FETCH_FULFILLED</code> action is completed:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/sagas/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fork &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; watchProductsFetchFulfilled &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./products'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">rootSaga</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> fork(watchProductsFetchFulfilled)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// this code can grow very quickly so there may be a better organization than the present one...</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; takeLatest &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; select, put &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; selectProduct &#125; <span class=\"keyword\">from</span> <span class=\"string\">'actions/products'</span></div><div class=\"line\"><span class=\"keyword\">import</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">selectProductAfterProductsFulfilled</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123; products &#125; = <span class=\"keyword\">yield</span> select() <span class=\"comment\">// select function is like getState()</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (products.productsList.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> put(selectProduct(products.productsList[<span class=\"number\">0</span>].id)) <span class=\"comment\">// puts a new action on the flow</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchProductsFetchFulfilled</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* takeLatest(</div><div class=\"line\">    [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_FULFILLED`</span>, <span class=\"comment\">/* Other actions you want to watch */</span>],</div><div class=\"line\">    selectProductAfterProductsFulfilled</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Redux sagas use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function%2A\" target=\"_blank\" rel=\"external\">generator functions</a>, which is an entire concept by itself, so I won’t go deeper on this.</p>\n<h3 id=\"Redux-Logger\"><a href=\"#Redux-Logger\" class=\"headerlink\" title=\"Redux Logger\"></a>Redux Logger</h3><p>This middleware is not precisely the most functional one, but in the development phase, I think it’s a great resource. Basically what offers you is a console output, directly on the browser. There are several other tools that do the same and much more, <a href=\"https://github.com/gaearon/redux-devtools\" target=\"_blank\" rel=\"external\">redux-devtools</a> for example, but I wanted to mention <a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\" rel=\"external\">Redux Logger</a> given that it’s quite comfortable for me in development.<br>The result you will accomplish is something like this:</p>\n<p></p><p align=\"center\"><img src=\"/images/redux-logger.png\" alt=\"\"></p><br>You can configure the action log to be collapsed / expanded by default. You can check the entire list of actions being dispatched, the app’s state before and after, and also the payload of each action. I find this quite cool.<p></p>\n<p>To implement this middleware, you just have to <a href=\"#Store-Config\">include it in your store</a>.</p>\n<h2 id=\"Redux-Selectors\"><a href=\"#Redux-Selectors\" class=\"headerlink\" title=\"Redux Selectors\"></a>Redux Selectors</h2><p>I wanted to introduce the concept of selectors because they are really helpful to keep our code decoupled and our components clean.<br>Let’s suppose you receive a list of products like this one:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&#123;</div><div class=\"line\">  name: <span class=\"string\">'apples'</span>,</div><div class=\"line\">  id: <span class=\"number\">1</span>,</div><div class=\"line\">  harvested: <span class=\"string\">'2017-08-12T20:17:46.384Z'</span></div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\">  name: <span class=\"string\">'pears'</span>,</div><div class=\"line\">  id: <span class=\"number\">2</span>,</div><div class=\"line\">  harvested: <span class=\"string\">'2017-07-11T20:15:03.204Z'</span></div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>This array would be in your <code>state.products.productsList</code> after a <code>_FULFILLED</code> action is dispatched. To display the dates, probably you will want to format their values using <a href=\"https://www.npmjs.com/package/moment\" target=\"_blank\" rel=\"external\">moment</a>, and you would be tempted to do so inside the component:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</div><div class=\"line\">  products: state.products.productsList.map(<span class=\"function\">(<span class=\"params\">&#123;name, id, harvested&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">    name,</div><div class=\"line\">    id,</div><div class=\"line\">    harvested: moment(<span class=\"string\">'2017-07-11T20:15:03.204Z'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>)</div><div class=\"line\">  &#125;)),</div><div class=\"line\">  loading: state.products.loading, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  error: state.products.error, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  selectedProduct: state.products.selectedProduct</div><div class=\"line\">  <span class=\"comment\">// not the cool way</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>This is, creating a new array of all the products but with each date formatted, inside <code>mapStateToProps</code>. The method <code>mapStateToProps</code> should be, as it’s name stands, a simple map between the state and the component’s props. But here the component should not be <strong><i>decorating</i></strong> or <strong><i>calculating</i></strong> anything.<br>If you keep transforming / decorating inside your components, your code can quickly get messy. Keeping in mind that the app’s state must remain as simple as we can, <strong><i>all the transformation, calculation and decoration of data will be done in selectors</i></strong>.</p>\n<p>Selectors can be just functions that receive the state, perform all the needed work, and return the result to the components. That would be the same thing I just described but with the function definition somewhere else.<br>We will use a better approach, implementing <code>createSelector</code>, a method provided by the library <a href=\"https://github.com/reactjs/reselect\" target=\"_blank\" rel=\"external\">reselect</a>. By doing this, our selectors will be <a href=\"https://github.com/reactjs/reselect#motivation-for-memoized-selectors\" target=\"_blank\" rel=\"external\">memoized</a>, which basically means that our selector functions will be executed only when a part of the state they are watching changes (i.e. they will be executed only when needed).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/selectors/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'reselect'</span></div><div class=\"line\"><span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">'moment'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> selectProductsList = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.products.productsList</div><div class=\"line\"><span class=\"keyword\">const</span> selectSelectedProduct = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.products.selectedProduct</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getProductsList = createSelector(</div><div class=\"line\">  [selectProductsList],</div><div class=\"line\">  productsList =&gt; productsList.map(<span class=\"function\">(<span class=\"params\">&#123;name, id, harvested&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">    name,</div><div class=\"line\">    id,</div><div class=\"line\">    harvested: moment(<span class=\"string\">'2017-07-11T20:15:03.204Z'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>)</div><div class=\"line\">  &#125;))</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getSelectedProduct = createSelector(</div><div class=\"line\">  [selectProductsList, selectSelectedProduct],</div><div class=\"line\">  (productsList, selectedProduct) =&gt; productsList.find(<span class=\"function\"><span class=\"params\">product</span> =&gt;</span> product.id === selectedProduct)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>And then, your smart component would pass the state to the selector methods, connecting to a <strong><i>decorated / calculated</i></strong> part of the state.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// your mapStateToProps method</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; getSelectedProduct, getProductsList &#125; <span class=\"keyword\">from</span> <span class=\"string\">'selectors/products'</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"keyword\">let</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</div><div class=\"line\">  products: getProductsList(state),</div><div class=\"line\">  loading: state.products.loading, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  error: state.products.error, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  selectedProduct: getSelectedProduct(state)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>With this, we have implemented a selector to transform our dates, but also we included <code>getSelectedProduct</code>, which is a selector that calculates the selected product object (with all it’s data, not only the <code>id</code> as we had before). The state remains simple and it doesn’t repeat data. The selector functions, based on that simple data, decorate and calculate new data, and then provides it to the components.<br>To conclude the example, our component render method would change from:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li className=&#123;<span class=\"keyword\">this</span>.props.selectedProduct === product.id ? <span class=\"string\">'selected'</span> : <span class=\"string\">''</span>&#125; key=&#123;key&#125; onClick=&#123;() =&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li className=&#123;<span class=\"keyword\">this</span>.props.selectedProduct.id === product.id ? <span class=\"string\">'selected'</span> : <span class=\"string\">''</span>&#125; key=&#123;key&#125; onClick=&#123;() =&gt;</div><div class=\"line\">  <span class=\"comment\">// this.props.selectedProduct is now an object</span></div></pre></td></tr></table></figure>\n<h2 id=\"Reducers-Recommended-Structure\"><a href=\"#Reducers-Recommended-Structure\" class=\"headerlink\" title=\"Reducers Recommended Structure\"></a>Reducers Recommended Structure</h2><p>In first place, I’ve seen a lot code like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/products.js</span></div><div class=\"line\"><span class=\"keyword\">let</span> productsReducer = <span class=\"function\">(<span class=\"params\">state = &#123;productsList: [], selectedProduct: <span class=\"string\">''</span>&#125;, action</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'PRODUCTS_RECEIVED'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        productsList: action.payload</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'PRODUCTS_SELECT'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        selectedProduct: action.payload</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>First issue, your action types are completely hardcoded. Second, you are using a switch. Third, which is your initial state? It’s the <code>{productsList: [], selectedProduct: &#39;&#39;}</code> fragment, really long line if your initial state grows, and not clear to see if some new dev enters to the team…<br>In addition, let’s suppose your back end returns your products like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    main: &#123;</div><div class=\"line\">      result: &#123;</div><div class=\"line\">        array_data: &#123;</div><div class=\"line\">          data: [&#123;</div><div class=\"line\">            product: <span class=\"string\">'apples'</span>,</div><div class=\"line\">            harvested: <span class=\"string\">'2017-08-12T20:17:46.384Z'</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          &#123;</div><div class=\"line\">            test: <span class=\"string\">'pears'</span>,</div><div class=\"line\">            harvested: <span class=\"string\">'2017-07-11T20:15:03.204Z'</span></div><div class=\"line\">          &#125;]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>You may find this rare or impossible. Trust me, API responses can be even worst than this. In this case, your state would receive a deeply nested object as data… Not cool at all.</p>\n<p>I think that these reasons are enough to provide some advice in the Reducers structure.</p>\n<p>In first place, define an action-names-constants-file at a project level, your actions names will be defined there. Here’s a simple constants file defining actions:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/constants/action-types.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> PRODUCTS_FETCH = <span class=\"string\">'PRODUCTS_FETCH'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> PRODUCTS_SELECT = <span class=\"string\">'PRODUCTS_SELECT'</span></div></pre></td></tr></table></figure></p>\n<p>But I would advice to do something like this instead:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/constants/action-types.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> keyMirror <span class=\"keyword\">from</span> <span class=\"string\">'key-mirror-nested'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> keyMirror(&#123;</div><div class=\"line\">  PRODUCTS: &#123;</div><div class=\"line\">    FETCH: <span class=\"literal\">null</span>,</div><div class=\"line\">    SELECT: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, &#123; <span class=\"attr\">connChar</span>: <span class=\"string\">'_'</span> &#125;)</div></pre></td></tr></table></figure></p>\n<details><br>  <summary><i>Brief explanation</i></summary><a href=\"https://github.com/apolkingg8/KeyMirrorNested\" target=\"_blank\" rel=\"external\">key-mirror-nested</a> is a library I find very useful for this case. Here I export an object with one key, <code>PRODUCTS</code>, and if you try <code>PRODUCTS.FETCH</code>, that object will have the value <code>PRODUCTS_FETCH</code>. So that’s the constant I need. Notice that I used underscore as <code>connChar</code>, you can use whatever you prefer.<br></details>\n\n<p>And then your reducer would be something like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; handleActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">  productsList: [],</div><div class=\"line\">  selectedProduct: <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> handleActions(&#123;</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.SELECT&#125;</span>`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    selectedProduct: action.payload</div><div class=\"line\">  &#125;),</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    productsList: action.payload</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;, initialState)</div></pre></td></tr></table></figure>\n<p>By doing this</p>\n<ul>\n<li>The initial state is very clear</li>\n<li>Action types are not hardcoded</li>\n<li>We are using an object notation instead of a switch</li>\n<li>And we are clearly resolving the deeply nested problem the API may be sending us.</li>\n</ul>\n<p>Finally, I recommend to have <code>src/reducers/index.js</code> to centralize all your reducers and keep a clear idea of your state:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> products <span class=\"keyword\">from</span> <span class=\"string\">'./products'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> combineReducers(&#123;</div><div class=\"line\">  products</div><div class=\"line\">  <span class=\"comment\">// other reducers</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>This file will then be consumed when we <a href=\"#Store-Config\">configure our store</a>.</p>\n<h2 id=\"Store-Config\"><a href=\"#Store-Config\" class=\"headerlink\" title=\"Store Config\"></a>Store Config</h2><p>This is just an example of how to declare your store. You may find better / cleaner ways to do it. I believe this part of code was needed in the article, given that I mention so many things regarding middlewares. The configureStore is where you reference your <code>reducers/index.js</code> file, creating the store with the data you defined in your reducers, and attaching all the middlewares you want to the actions pipeline.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/stores/configureStore.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> createLogger <span class=\"keyword\">from</span> <span class=\"string\">'redux-logger'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; routerMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> promiseMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'redux-promise-middleware'</span></div><div class=\"line\"><span class=\"keyword\">import</span> createSagaMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga'</span></div><div class=\"line\"><span class=\"keyword\">import</span> thunkMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'redux-thunk'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> indexReducer <span class=\"keyword\">from</span> <span class=\"string\">'reducers/index'</span></div><div class=\"line\"><span class=\"keyword\">import</span> rootSaga <span class=\"keyword\">from</span> <span class=\"string\">'sagas/index'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> logger = createLogger(&#123; <span class=\"attr\">collapsed</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\"><span class=\"keyword\">const</span> router = routerMiddleware(browserHistory)</div><div class=\"line\"><span class=\"keyword\">const</span> promise = promiseMiddleware()</div><div class=\"line\"><span class=\"keyword\">const</span> saga = createSagaMiddleware()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> createStoreWithMiddleware = applyMiddleware(</div><div class=\"line\">    router,</div><div class=\"line\">    logger,</div><div class=\"line\">    promise,</div><div class=\"line\">    saga,</div><div class=\"line\">    thunkMiddleware)(createStore)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> configureStore = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> store = createStoreWithMiddleware(rootReducer, &#123;&#125;)</div><div class=\"line\">  saga.run(rootSaga)</div><div class=\"line\">  <span class=\"keyword\">return</span> store</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then you can have an <code>index.jsx</code> file, which will simply import the <code>configureSture</code> function exported by <code>configureStore.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./stores/configureStore'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = configureStore()</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</div><div class=\"line\">  &lt;<span class=\"regexp\">/Provider&gt;,</span></div><div class=\"line\"><span class=\"regexp\">  document.getElementById('yourRootElementId')</span></div><div class=\"line\"><span class=\"regexp\">)</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>In my first post I wanted to share some appreciations I have regarding specific practices in the frontend development when implementing Redux. I will try to explain how you can<b> shape your assets in the frontend</b> so you can keep an organized structure. I will try to improve code examples gradually, from simple to more complex but robust code…<br>If I am lucky, I will receive some feedback on this and then I can perform updates on this post.<br>In several parts of the article, I point to the <a href=\"#Reducers-Recommended-Structure\">Reducers Recommended Structure</a> section, you may want to read it first and then re-read it when necessary, due this reducers structure is one of the core concepts of the article.</p>\n<p>I assume that you have basic knowledge of Redux and strong knowledge of ES6. Also I will be using React to build example components.</p>\n<h2 id=\"What-we-will-cover\"><a href=\"#What-we-will-cover\" class=\"headerlink\" title=\"What we will cover\"></a>What we will cover</h2><p><i><a href=\"#Folder-Structure\">Folder Structure</a></i><br><i><a href=\"#Why-Smart-and-Dumb-Components\">Why Smart and Dumb Components</a></i><br><i><a href=\"#Standard-Actions\">Standard Actions</a></i><br><i><a href=\"#Middlewares\">Middlewares</a></i><br><i><a href=\"#Redux-Selectors\">Redux Selectors</a></i><br><i><a href=\"#Reducers-Recommended-Structure\">Reducers Recommended Structure</a></i><br><i><a href=\"#Store-Config\">Store Config</a></i></p>\n<h2 id=\"Folder-Structure\"><a href=\"#Folder-Structure\" class=\"headerlink\" title=\"Folder Structure\"></a>Folder Structure</h2><p>I found this structure very effective. By no means I intend to say it will be useful for you, but in order to understand some of the examples I provide on this post, it’s necessary to see the files and folders structure, plus a brief summary of each one of them. I took this example form a previous project I was working on, I will focus on the redux-related parts:</p>\n<p></p><p align=\"center\"><img src=\"/images/folder-structure.png\" alt=\"\"></p><p></p>\n<h3 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"/actions\"></a>/actions</h3><p>Contains business-entity-grouped actions. We will go deeper on this.</p>\n<h3 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"/api\"></a>/api</h3><p>This folder contains the API communication layer of the project.</p>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"/components\"></a>/components</h3><p>Dumb components, no business logic, no redux needed.</p>\n<h3 id=\"constants\"><a href=\"#constants\" class=\"headerlink\" title=\"/constants\"></a>/constants</h3><p>I recommend to place one single file containing all the string constants representing action names. I will provide more detail for this file, and of course you may decide to have several files instead of a single one.</p>\n<h3 id=\"containers\"><a href=\"#containers\" class=\"headerlink\" title=\"/containers\"></a>/containers</h3><p>Smart components, specific business logic, redux needed.</p>\n<h3 id=\"reducers\"><a href=\"#reducers\" class=\"headerlink\" title=\"/reducers\"></a>/reducers</h3><p>Pretty self explanatory, reducers go here.</p>\n<h3 id=\"sagas\"><a href=\"#sagas\" class=\"headerlink\" title=\"/sagas\"></a>/sagas</h3><p>Here we will place the needed sagas. I will provide an explanation of redux-sagas, however, it’s a quite advanced concept and I’m pretty much a beginner on this.</p>\n<h3 id=\"stores\"><a href=\"#stores\" class=\"headerlink\" title=\"/stores\"></a>/stores</h3><p>Here we create the store, one of the key parts of Redux. We apply the middlewares to the store as well.</p>\n<h2 id=\"Why-Smart-and-Dumb-Components\"><a href=\"#Why-Smart-and-Dumb-Components\" class=\"headerlink\" title=\"Why Smart and Dumb Components?\"></a>Why Smart and Dumb Components?</h2><p>One of the most important things when using redux, is to keep in mind that you should follow a <i>“reusable components”</i> philosophy. More precisely, inside the Redux world most of the developers have taken an smart-components and dumb-components approach:</p>\n<h3 id=\"Smart-Components\"><a href=\"#Smart-Components\" class=\"headerlink\" title=\"Smart Components\"></a>Smart Components</h3><blockquote>\n<p>Those that have specific business logic and probably are specific to your app. These components <strong>use Redux</strong>, because they attach (connect) themselves to the parts of the app-state they need in order to work. This is what Redux is meant for. An example of a smart component would be a UsersListComponent, or may be a BirthdaySelectComponent.</p>\n</blockquote>\n<h3 id=\"Dumb-Components\"><a href=\"#Dumb-Components\" class=\"headerlink\" title=\"Dumb Components\"></a>Dumb Components</h3><blockquote>\n<p>They are context / business agnostic, and this makes them fully reusable. So, an example of a dumb-component would be a ListComponent. This is not a UsersListComponent, or a ProductsListComponent. Dumb components don’t have business knowledge, they are fully reusable as long as you provide “the firm” they need to render, and most importantly, <strong>they don’t need Redux</strong>, because all its data is provided by some other smarter component.</p>\n</blockquote>\n<p>Redux is a framework to maintain the app’s state, <strong><i>why am I talking about smart and dumb components</i></strong>?<br>Smart components will use redux, dumb components won’t. This is important for this article given that I’m trying to explain a way to keep your code clean. <strong><i>If all your components access the app state, your code can get messy very quickly</i></strong>.</p>\n<h2 id=\"Standard-Actions\"><a href=\"#Standard-Actions\" class=\"headerlink\" title=\"Standard Actions\"></a>Standard Actions</h2><p>I would describe actions as public notices, distributed within your app. This means that someone will trigger an action and some other subscribers may do something regarding that action. Pretty much like an observer pattern, but cooler. Actions must first be defined, and then they can be triggered, intercepted and analyzed to do something about them. These are examples of <strong><i>action definitions</i></strong>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/actions/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> selectProduct = createAction(<span class=\"string\">'PRODUCTS_SELECT'</span>, product =&gt; product.id)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchProducts = createAction(<span class=\"string\">'PRODUCTS_FETCH'</span>, () =&gt; [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'P1'</span>, <span class=\"attr\">id</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'P2'</span>, <span class=\"attr\">id</span>: <span class=\"number\">2</span>&#125;])</div><div class=\"line\"><span class=\"comment\">/* We will define fetchProducts soon, per now it just hardcodes an array of products as payload */</span></div><div class=\"line\"><span class=\"comment\">/* This file uses some ES6 features. It may be confusing if you are not used to them */</span></div></pre></td></tr></table></figure></p>\n<details><br>  <summary><i>A bit more detail regarding createAction</i></summary><code>createAction</code> is a function that receives 3 parameters: <code>actionName</code>, <code>payloadCreator</code> and <code>metadataCreator</code>. I won’t deepen that much on this topic, but here’s a basic explanation:<br>  - <code>actionName</code>: a string representing the identifier of the action.<br>  - <code>payloadCreator</code>: a function definition, that will receive the arguments provided by the action invoker, and returns the payload accessible in reducers watching the action (action.payload).<br>  - <code>metadataCreator</code>: a function definition, that will receive the arguments provided by the action invoker, and returns the metadata accessible in reducers watching the action (action.metadata).<br>  Deciding if something is payload or metadata, is up to you.<br></details>\n\n<p>Note here that actions are function definitions that expect to be invoked with some data. In this example, <code>selectProduct</code> is a function that expects to be invoked with an object, <strong><i>locally called</i></strong> product. The action definition trusts that the product will have an <code>id</code> property. As this action definition is returning <code>product.id</code>, that <code>id</code> will be the payload in the reducer subscribed to the action <code>PRODUCTS_SELECT</code>. If we want we can send the entire product to the reducer, by simply doing <code>product =&gt; product)</code>.<br>Im my experience, it’s very common to see <code>lodash</code> usages (<code>find</code>, <code>get</code>, <code>filter</code>, <code>reduce</code>, <code>first</code>), in these action definitions. I believe there’s no problem with that. Remember, what <code>payloadCreator</code> returns, will be <code>action.payload</code> in the reducers watching for the action, and that’s what you will be able to include in the app’s state. We want to keep the state as dumb as possible, very simple. If we need to transform / decorate the simple data we stored in the app’s state, we can do it by using <a href=\"#Redux-Selectors\">selectors</a>.</p>\n<p>Given those two defined actions, some smart component (consisting of two files), may do something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/containers/products/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; bindActionCreators &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fetchProducts, selectProduct &#125; <span class=\"keyword\">from</span> <span class=\"string\">'actions/products'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ProductsListComponent <span class=\"keyword\">from</span> <span class=\"string\">'./ProductsListComponent'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</div><div class=\"line\">  products: state.products.productsList,</div><div class=\"line\">  selectedProduct: state.products.selectedProduct</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapDispatchToProps = <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> bindActionCreators(&#123;</div><div class=\"line\">  selectProduct,</div><div class=\"line\">  fetchProducts</div><div class=\"line\">&#125;, dispatch)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(ProductsListComponent)</div></pre></td></tr></table></figure>\n<p>At this point, in the component definition has access to four props:</p>\n<ul>\n<li><p><code>this.props.products</code>: <strong>connected</strong> to <code>state.products.productsList</code>.</p>\n</li>\n<li><p><code>this.props.selectedProduct</code>: <strong>connected</strong> to <code>state.products.selectedProduct</code>.</p>\n</li>\n<li><p><code>this.props.selectProduct</code>: a function I can call, which will result in an action (<code>PRODUCTS_SELECT</code>)</p>\n</li>\n<li><p><code>this.props.fetchProducts</code>: a function I can call, which will result in an action (<code>PRODUCTS_FETCH</code>)</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/containers/products/products.jsx</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductsListComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.fetchProducts() <span class=\"comment\">// once mounted, we will fetch. Fetch is returning hardcoded data for now</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.props.products.map(<span class=\"function\">(<span class=\"params\">product, key</span>) =&gt;</span> (</div><div class=\"line\">              &lt;li key=&#123;key&#125; onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.props.selectProduct(product)&#125;&gt;&#123;product.name&#125;&lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\">            ))</span></div><div class=\"line\"><span class=\"regexp\">          &#125;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;/u</span>l&gt;</div><div class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">    )</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">export default ProductsListComponent</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note that this smart component is triggering actions differently:</p>\n<ul>\n<li><code>this.props.selectProduct(product)</code> is triggered and it includes data for the <code>payloadCreator</code>.</li>\n<li><code>this.props.fetchProducts()</code> is triggered but it doesn’t include a payload, because it’s not needed so far.</li>\n</ul>\n<p><strong><i>If you want to send a payload when executing an action</i></strong>, you need to provide arguments to the function call, i.e. <code>this.props.myActionName({some: &#39;payload&#39;}, {some: &#39;metadata&#39;})</code>. These parameters are received by the action creators, like <code>product</code> is being received by selectProduct, which takes it and returns <code>product.id</code>. All reducers expecting for a <code>PRODUCTS_SELECT</code> action, will receive the new <code>id</code>.</p>\n</blockquote>\n<p>Until now, we have have defined some actions and some component connections to those actions and to some parts of the state as well. The next step is <strong><i>understand the needed reducer</i></strong>, which will receive the payload and update the corresponding part of the state. By doing this, <strong><i>all the components connected to those parts of the state</i></strong>, will receive the new version of the state.<br>You may find this reducer example a bit strange, I haven’t completely described my approach to reducers yet. You can <a href=\"#Reducers-Recommended-Structure\">take a look at that section</a> now if you want.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/products.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; handleActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">  productsList: [],</div><div class=\"line\">  selectedProduct: <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> handleActions(&#123;</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.SELECT&#125;</span>`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    selectedProduct: action.payload <span class=\"comment\">// action.payload will be the product id provided by the action as I described earlier</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    productsList: action.payload <span class=\"comment\">// action.payload will be the hardcoded array I provided earlier</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;, initialState)</div></pre></td></tr></table></figure></p>\n<p>Now, the Redux cycle on this practical example:</p>\n<ul>\n<li>A smart component is mounted and it triggers, <code>this.props.fetchProducts()</code>. No payload needed</li>\n<li>The action definition for <code>fetchProducts</code> is per now returning a hardcoded list of products, that will end up in the reducer watching for the action <code>PRODUCTS_FETCH</code>.</li>\n<li>The reducer updates the state with the list of products. All components connected to <code>state.products.productsList</code> will receive the update.<ul>\n<li>Particularly, <code>products.jsx</code> will now iterate through the provided array instead of an empty one (initial state).</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Middlewares\"><a href=\"#Middlewares\" class=\"headerlink\" title=\"Middlewares\"></a>Middlewares</h2><p>Middlewares are fragments of code you integrate to your app. <i>They work in the middle</i> of the actions pipeline, analyzing every action and deciding if they should do something about it or not, and then passing the action to the next middleware or actor in the pipeline. For this article I want to introduce the following middlewares:</p>\n<p><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\">Redux Thunk</a><br><a href=\"https://github.com/pburtchaell/redux-promise-middleware\" target=\"_blank\" rel=\"external\">Redux Promise Middleware</a><br><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\" rel=\"external\">Redux Saga</a><br><a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\" rel=\"external\">Redux Logger</a></p>\n<p>I have found these middlewares really useful. These tools provide a mechanism to improve the actions workflow in the web app and keep it clean and logic. You can find how to include middlewares in the <a href=\"#Store-Config\">store config section</a>. Let’s talk about each one of them.</p>\n<h3 id=\"Redux-Thunk\"><a href=\"#Redux-Thunk\" class=\"headerlink\" title=\"Redux Thunk\"></a>Redux Thunk</h3><p>So far, I’ve been talking about <a href=\"#Reducers-Recommended-Structure\">reducers returning new versions of the state</a>, i.e. returning an object. The redux-thunk middleware <strong><i>checks if the </i></strong><code>payloadCreator</code><strong><i> returns a function instead of a plain object</i></strong>. If the <code>payloadCreator</code> is returning a function, then the middleware invokes that function with two parameters: <code>dispatch</code> and <code>getState</code>, both functions.<br>I wrote this based on the <a href=\"https://github.com/gaearon/redux-thunk#motivation\" target=\"_blank\" rel=\"external\">official examples</a>, the code can be improved but I wanted to leave it as explicit as possible.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/actions/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> selectProductAction = createAction(<span class=\"string\">'PRODUCTS_SELECT'</span>, productId =&gt; productId)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> selectProduct = <span class=\"function\">(<span class=\"params\">product</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState</span>) =&gt;</span> &#123; <span class=\"comment\">// function returned, which redux-thunk will invoke with the well-know parameters</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; products &#125; = getState()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (products.selectedProduct === product.id) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dispatch(selectProductAction(product.id));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>My goal with this example is to show the following:</p>\n<ul>\n<li>An action to select a product is created.</li>\n<li>A thunk to select a product is created as well.</li>\n<li>The thunk checks if the payload provided is the same as the existing in the state.<ul>\n<li>If the data is the same, it returns null (single return statement).</li>\n<li>If the data is different, then it dispatches the proper action.</li>\n</ul>\n</li>\n</ul>\n<p>Instead of directly returning a payload and which will update all the related reducers, you check something to decide between executing the action or not.</p>\n<p>Why would you select a product that is already selected? <strong><i>Redux Thunk enables you to evaluate some criteria before dispatching an action</i></strong>.</p>\n<h3 id=\"Redux-Promise-Middleware\"><a href=\"#Redux-Promise-Middleware\" class=\"headerlink\" title=\"Redux Promise Middleware\"></a>Redux Promise Middleware</h3><p>I find this middleware a bit complicated to explain, so I’ll do my best.</p>\n<p>Remember that middlewares are (in part) action analyzers. In this case, to use <code>redux-promise-middleware</code>, the function <code>payloadCreator</code> needs to return an object whose only key is <code>promise</code>, and it’s value is a promise instance, i.e. <code>{promise: promiseInstance}</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/api/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> fetchProducts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> axios.get(<span class=\"string\">'https://some-api-url.com/products'</span>)</div><div class=\"line\"><span class=\"comment\">// axios' simple way to perform a get method</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/actions/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> productsApi <span class=\"keyword\">from</span> <span class=\"string\">'api/products'</span></div><div class=\"line\"><span class=\"keyword\">import</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchProducts = createAction(PRODUCTS.FETCH, () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> promise = productsApi.fetchProducts()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; promise &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// Also using some ES6 features here</span></div></pre></td></tr></table></figure>\n<p><code>Redux-promise-middleware</code> detects this and automatically modifies the default action pipeline, avoiding the dispatch of <code>PRODUCTS_FETCH</code>, and producing two possible results:</p>\n<ul>\n<li><code>PRODUCTS_FETCH_PENDING</code></li>\n<li><code>PRODUCTS_FETCH_FULFILLED</code></li>\n</ul>\n<p>Or…</p>\n<ul>\n<li><code>PRODUCTS_FETCH_PENDING</code></li>\n<li><code>PRODUCTS_FETCH_REJECTED</code></li>\n</ul>\n<p>This two flows represent the possible states of a promise. With this, your reducers watch for actions <code>_PENDING</code>, <code>_FULFILLED</code> and <code>_REJECTED</code>.</p>\n<p>Why is this useful? Let’s see:</p>\n<ul>\n<li>By watching <code>_PENDING</code> you can set some loading value, in order to activate spinners or loading components in your front-end.</li>\n<li>By watching <code>_FULFILLED</code> you will receive in <code>action.payload</code>, the data provided by the back end response.</li>\n<li>By watching <code>_REJECTED</code> you can specify error messages based on the back end response.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; handleActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">  productsList: [],</div><div class=\"line\">  selectedProduct: <span class=\"string\">''</span>,</div><div class=\"line\">  loading: <span class=\"literal\">false</span>,</div><div class=\"line\">  error: <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> handleActions(&#123;</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_PENDING`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    loading: <span class=\"literal\">true</span>,</div><div class=\"line\">    productsList: [],</div><div class=\"line\">    error: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_FULFILLED`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    loading: <span class=\"literal\">false</span>,</div><div class=\"line\">    productsList: action.payload.data,</div><div class=\"line\">    error: <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"comment\">// use lodash to get the data _.get(action, 'payload.data', [])</span></div><div class=\"line\">    <span class=\"comment\">// remember action.payload in this case is a back-end response</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_REJECTED`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    loading: <span class=\"literal\">false</span></div><div class=\"line\">    productsList: [],</div><div class=\"line\">    error: <span class=\"string\">`Something went wrong, <span class=\"subst\">$&#123;action.payload.error.message&#125;</span>`</span>,</div><div class=\"line\">    <span class=\"comment\">// use lodash to get the data _.get(action, 'payload.error.message', null)</span></div><div class=\"line\">    <span class=\"comment\">// remember action.payload in this case is a back-end response</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;, initialState)</div></pre></td></tr></table></figure>\n<p>With this, your components connected to these parts of the state, can logically change their content when these actions produce a change in the state. The action <code>PRODUCTS_FETCH</code> will never be dispatched. Instead, the middleware will ensure that <code>PRODUCTS_FETCH_PENDING</code> and the corresponding <code>_FULFILLED</code> or <code>_REJECTED</code> are thrown.<br>Let’s see a possible component’s code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/containers/products/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; bindActionCreators &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fetchProducts, selectProduct &#125; <span class=\"keyword\">from</span> <span class=\"string\">'actions/products'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ProductsListComponent <span class=\"keyword\">from</span> <span class=\"string\">'./ProductsListComponent'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</div><div class=\"line\">  products: state.products.productsList,</div><div class=\"line\">  loading: state.products.loading, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  error: state.products.error, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  selectedProduct: state.products.selectedProduct</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapDispatchToProps = <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> bindActionCreators(&#123;</div><div class=\"line\">  selectProduct,</div><div class=\"line\">  fetchProducts</div><div class=\"line\">&#125;, dispatch)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(ProductsListComponent)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/containers/products/products.jsx</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductsListComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.fetchProducts()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  getProducts() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;ul&gt;</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.props.products.map(<span class=\"function\">(<span class=\"params\">product, key</span>) =&gt;</span> (</div><div class=\"line\">            &lt;li key=&#123;key&#125; onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.props.selectProduct(product)&#125;&gt;&#123;product.name&#125;&lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\">          ))</span></div><div class=\"line\"><span class=\"regexp\">        &#125;</span></div><div class=\"line\"><span class=\"regexp\">      &lt;/u</span>l&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.loading &amp;&amp; <span class=\"string\">'loading component'</span>&#125;</div><div class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.error &amp;&amp; <span class=\"string\">`Oops... <span class=\"subst\">$&#123;error&#125;</span>`</span>&#125;</div><div class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.products.length &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"keyword\">this</span>.getProducts()&#125;</div><div class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">    )</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">export default ProductsListComponent</span></div></pre></td></tr></table></figure>\n<p>This last example requires at least an intermediate knowledge of ES6.</p>\n<h3 id=\"Redux-Saga\"><a href=\"#Redux-Saga\" class=\"headerlink\" title=\"Redux Saga\"></a>Redux Saga</h3><p>I believe Sagas is a quite advanced concept, so I will be giving some very basic approach to understand what they do, and how to implement them.<br>Until now, we went through the main actors of Redux. If I was clear enough, you we can agree that so far, the only listeners / watchers of actions, are the reducers. The goal of a reducer is modify a specific part of the app’s state. I would describe a Redux Saga as actions watchers as well, but in this case they do not modify the app’s state. What a saga does, is to execute some code after an action is dispatched. This is useful in some specific cases:</p>\n<ul>\n<li>Given an action:<ul>\n<li>You want to dispatch another specific action, or several actions.</li>\n<li>You want to change the url.</li>\n<li>You want to store something in sessionStorage.</li>\n<li>etc…</li>\n</ul>\n</li>\n</ul>\n<p>I will take the first case as an example to show you how to use Redux Sagas. Let’s continue with the last example of <code>products/index.js</code> and <code>products/products.jsx</code>.<br>So far, when <code>state.products.productsList</code> is an array of products, <code>products.jsx</code> will render an <code>ul &gt; li</code> of products. With the current code, clicking on any of those <code>li</code> will trigger a <code>PRODUCT_SELECT</code> action. Let’s put a class on the selected <code>li</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">getProducts() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.props.products.map(<span class=\"function\">(<span class=\"params\">product, key</span>) =&gt;</span> (</div><div class=\"line\">          &lt;li className=&#123;<span class=\"keyword\">this</span>.props.selectedProduct === product.id ? <span class=\"string\">'selected'</span> : <span class=\"string\">''</span>&#125; key=&#123;key&#125; onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.props.selectProduct(product)&#125;&gt;</div><div class=\"line\">            &#123;product.name&#125;</div><div class=\"line\">          &lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\">        ))</span></div><div class=\"line\"><span class=\"regexp\">      &#125;</span></div><div class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><small>You can use <a href=\"https://github.com/JedWatson/classnames\" target=\"_blank\" rel=\"external\">classNames</a> to correctly implement a logical className approach. I just want to keep this as a stand alone example.</small><br>Now, you can style that <code>.selected</code> class to see the result. But we have a problem, what happens on the first load, before any click? <code>state.products.selectedProduct</code> is an empty string, so at the beginning, no product will be selected. Let’s suppose we want to select the first product by default, when the list loads. We have at least two ways to do it:</p>\n<p>Modify the reducer, so with the <code>_FULFILLED</code> action not only the <code>productsList</code> will be returned, but also <code>selectedProduct</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_FULFILLED`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">  ...state,</div><div class=\"line\">  loading: <span class=\"literal\">false</span>,</div><div class=\"line\">  productsList: action.payload.data,</div><div class=\"line\">  error: <span class=\"literal\">null</span>,</div><div class=\"line\">  selectedProduct: action.payload.data[<span class=\"number\">0</span>].id</div><div class=\"line\">  <span class=\"comment\">// if data is an empty array, this will cause problems</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Or, in the other hand, we can take advantage of this case to implement Redux Sagas and properly dispatch a <code>PRODUCT_SELECT</code> action after a <code>PRODUCTS_FETCH_FULFILLED</code> action is completed:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/sagas/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fork &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; watchProductsFetchFulfilled &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./products'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">rootSaga</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> fork(watchProductsFetchFulfilled)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// this code can grow very quickly so there may be a better organization than the present one...</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; takeLatest &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; select, put &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; selectProduct &#125; <span class=\"keyword\">from</span> <span class=\"string\">'actions/products'</span></div><div class=\"line\"><span class=\"keyword\">import</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">selectProductAfterProductsFulfilled</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123; products &#125; = <span class=\"keyword\">yield</span> select() <span class=\"comment\">// select function is like getState()</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (products.productsList.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> put(selectProduct(products.productsList[<span class=\"number\">0</span>].id)) <span class=\"comment\">// puts a new action on the flow</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchProductsFetchFulfilled</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* takeLatest(</div><div class=\"line\">    [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>_FULFILLED`</span>, <span class=\"comment\">/* Other actions you want to watch */</span>],</div><div class=\"line\">    selectProductAfterProductsFulfilled</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Redux sagas use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function%2A\" target=\"_blank\" rel=\"external\">generator functions</a>, which is an entire concept by itself, so I won’t go deeper on this.</p>\n<h3 id=\"Redux-Logger\"><a href=\"#Redux-Logger\" class=\"headerlink\" title=\"Redux Logger\"></a>Redux Logger</h3><p>This middleware is not precisely the most functional one, but in the development phase, I think it’s a great resource. Basically what offers you is a console output, directly on the browser. There are several other tools that do the same and much more, <a href=\"https://github.com/gaearon/redux-devtools\" target=\"_blank\" rel=\"external\">redux-devtools</a> for example, but I wanted to mention <a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\" rel=\"external\">Redux Logger</a> given that it’s quite comfortable for me in development.<br>The result you will accomplish is something like this:</p>\n<p></p><p align=\"center\"><img src=\"/images/redux-logger.png\" alt=\"\"></p><br>You can configure the action log to be collapsed / expanded by default. You can check the entire list of actions being dispatched, the app’s state before and after, and also the payload of each action. I find this quite cool.<p></p>\n<p>To implement this middleware, you just have to <a href=\"#Store-Config\">include it in your store</a>.</p>\n<h2 id=\"Redux-Selectors\"><a href=\"#Redux-Selectors\" class=\"headerlink\" title=\"Redux Selectors\"></a>Redux Selectors</h2><p>I wanted to introduce the concept of selectors because they are really helpful to keep our code decoupled and our components clean.<br>Let’s suppose you receive a list of products like this one:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&#123;</div><div class=\"line\">  name: <span class=\"string\">'apples'</span>,</div><div class=\"line\">  id: <span class=\"number\">1</span>,</div><div class=\"line\">  harvested: <span class=\"string\">'2017-08-12T20:17:46.384Z'</span></div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\">  name: <span class=\"string\">'pears'</span>,</div><div class=\"line\">  id: <span class=\"number\">2</span>,</div><div class=\"line\">  harvested: <span class=\"string\">'2017-07-11T20:15:03.204Z'</span></div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>This array would be in your <code>state.products.productsList</code> after a <code>_FULFILLED</code> action is dispatched. To display the dates, probably you will want to format their values using <a href=\"https://www.npmjs.com/package/moment\" target=\"_blank\" rel=\"external\">moment</a>, and you would be tempted to do so inside the component:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</div><div class=\"line\">  products: state.products.productsList.map(<span class=\"function\">(<span class=\"params\">&#123;name, id, harvested&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">    name,</div><div class=\"line\">    id,</div><div class=\"line\">    harvested: moment(<span class=\"string\">'2017-07-11T20:15:03.204Z'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>)</div><div class=\"line\">  &#125;)),</div><div class=\"line\">  loading: state.products.loading, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  error: state.products.error, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  selectedProduct: state.products.selectedProduct</div><div class=\"line\">  <span class=\"comment\">// not the cool way</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>This is, creating a new array of all the products but with each date formatted, inside <code>mapStateToProps</code>. The method <code>mapStateToProps</code> should be, as it’s name stands, a simple map between the state and the component’s props. But here the component should not be <strong><i>decorating</i></strong> or <strong><i>calculating</i></strong> anything.<br>If you keep transforming / decorating inside your components, your code can quickly get messy. Keeping in mind that the app’s state must remain as simple as we can, <strong><i>all the transformation, calculation and decoration of data will be done in selectors</i></strong>.</p>\n<p>Selectors can be just functions that receive the state, perform all the needed work, and return the result to the components. That would be the same thing I just described but with the function definition somewhere else.<br>We will use a better approach, implementing <code>createSelector</code>, a method provided by the library <a href=\"https://github.com/reactjs/reselect\" target=\"_blank\" rel=\"external\">reselect</a>. By doing this, our selectors will be <a href=\"https://github.com/reactjs/reselect#motivation-for-memoized-selectors\" target=\"_blank\" rel=\"external\">memoized</a>, which basically means that our selector functions will be executed only when a part of the state they are watching changes (i.e. they will be executed only when needed).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/selectors/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'reselect'</span></div><div class=\"line\"><span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">'moment'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> selectProductsList = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.products.productsList</div><div class=\"line\"><span class=\"keyword\">const</span> selectSelectedProduct = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.products.selectedProduct</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getProductsList = createSelector(</div><div class=\"line\">  [selectProductsList],</div><div class=\"line\">  productsList =&gt; productsList.map(<span class=\"function\">(<span class=\"params\">&#123;name, id, harvested&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">    name,</div><div class=\"line\">    id,</div><div class=\"line\">    harvested: moment(<span class=\"string\">'2017-07-11T20:15:03.204Z'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>)</div><div class=\"line\">  &#125;))</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getSelectedProduct = createSelector(</div><div class=\"line\">  [selectProductsList, selectSelectedProduct],</div><div class=\"line\">  (productsList, selectedProduct) =&gt; productsList.find(<span class=\"function\"><span class=\"params\">product</span> =&gt;</span> product.id === selectedProduct)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>And then, your smart component would pass the state to the selector methods, connecting to a <strong><i>decorated / calculated</i></strong> part of the state.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// your mapStateToProps method</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; getSelectedProduct, getProductsList &#125; <span class=\"keyword\">from</span> <span class=\"string\">'selectors/products'</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"keyword\">let</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</div><div class=\"line\">  products: getProductsList(state),</div><div class=\"line\">  loading: state.products.loading, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  error: state.products.error, <span class=\"comment\">//new prop connected to the state</span></div><div class=\"line\">  selectedProduct: getSelectedProduct(state)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>With this, we have implemented a selector to transform our dates, but also we included <code>getSelectedProduct</code>, which is a selector that calculates the selected product object (with all it’s data, not only the <code>id</code> as we had before). The state remains simple and it doesn’t repeat data. The selector functions, based on that simple data, decorate and calculate new data, and then provides it to the components.<br>To conclude the example, our component render method would change from:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li className=&#123;<span class=\"keyword\">this</span>.props.selectedProduct === product.id ? <span class=\"string\">'selected'</span> : <span class=\"string\">''</span>&#125; key=&#123;key&#125; onClick=&#123;() =&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li className=&#123;<span class=\"keyword\">this</span>.props.selectedProduct.id === product.id ? <span class=\"string\">'selected'</span> : <span class=\"string\">''</span>&#125; key=&#123;key&#125; onClick=&#123;() =&gt;</div><div class=\"line\">  <span class=\"comment\">// this.props.selectedProduct is now an object</span></div></pre></td></tr></table></figure>\n<h2 id=\"Reducers-Recommended-Structure\"><a href=\"#Reducers-Recommended-Structure\" class=\"headerlink\" title=\"Reducers Recommended Structure\"></a>Reducers Recommended Structure</h2><p>In first place, I’ve seen a lot code like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/products.js</span></div><div class=\"line\"><span class=\"keyword\">let</span> productsReducer = <span class=\"function\">(<span class=\"params\">state = &#123;productsList: [], selectedProduct: <span class=\"string\">''</span>&#125;, action</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'PRODUCTS_RECEIVED'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        productsList: action.payload</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'PRODUCTS_SELECT'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        selectedProduct: action.payload</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>First issue, your action types are completely hardcoded. Second, you are using a switch. Third, which is your initial state? It’s the <code>{productsList: [], selectedProduct: &#39;&#39;}</code> fragment, really long line if your initial state grows, and not clear to see if some new dev enters to the team…<br>In addition, let’s suppose your back end returns your products like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    main: &#123;</div><div class=\"line\">      result: &#123;</div><div class=\"line\">        array_data: &#123;</div><div class=\"line\">          data: [&#123;</div><div class=\"line\">            product: <span class=\"string\">'apples'</span>,</div><div class=\"line\">            harvested: <span class=\"string\">'2017-08-12T20:17:46.384Z'</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          &#123;</div><div class=\"line\">            test: <span class=\"string\">'pears'</span>,</div><div class=\"line\">            harvested: <span class=\"string\">'2017-07-11T20:15:03.204Z'</span></div><div class=\"line\">          &#125;]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>You may find this rare or impossible. Trust me, API responses can be even worst than this. In this case, your state would receive a deeply nested object as data… Not cool at all.</p>\n<p>I think that these reasons are enough to provide some advice in the Reducers structure.</p>\n<p>In first place, define an action-names-constants-file at a project level, your actions names will be defined there. Here’s a simple constants file defining actions:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/constants/action-types.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> PRODUCTS_FETCH = <span class=\"string\">'PRODUCTS_FETCH'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> PRODUCTS_SELECT = <span class=\"string\">'PRODUCTS_SELECT'</span></div></pre></td></tr></table></figure></p>\n<p>But I would advice to do something like this instead:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/constants/action-types.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> keyMirror <span class=\"keyword\">from</span> <span class=\"string\">'key-mirror-nested'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> keyMirror(&#123;</div><div class=\"line\">  PRODUCTS: &#123;</div><div class=\"line\">    FETCH: <span class=\"literal\">null</span>,</div><div class=\"line\">    SELECT: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, &#123; <span class=\"attr\">connChar</span>: <span class=\"string\">'_'</span> &#125;)</div></pre></td></tr></table></figure></p>\n<details><br>  <summary><i>Brief explanation</i></summary><a href=\"https://github.com/apolkingg8/KeyMirrorNested\" target=\"_blank\" rel=\"external\">key-mirror-nested</a> is a library I find very useful for this case. Here I export an object with one key, <code>PRODUCTS</code>, and if you try <code>PRODUCTS.FETCH</code>, that object will have the value <code>PRODUCTS_FETCH</code>. So that’s the constant I need. Notice that I used underscore as <code>connChar</code>, you can use whatever you prefer.<br></details>\n\n<p>And then your reducer would be something like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/products.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; handleActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionTypes <span class=\"keyword\">from</span> <span class=\"string\">'constants/action-types'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; PRODUCTS &#125; = actionTypes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">  productsList: [],</div><div class=\"line\">  selectedProduct: <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> handleActions(&#123;</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.SELECT&#125;</span>`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    selectedProduct: action.payload</div><div class=\"line\">  &#125;),</div><div class=\"line\">  [<span class=\"string\">`<span class=\"subst\">$&#123;PRODUCTS.FETCH&#125;</span>`</span>]: <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> (&#123;</div><div class=\"line\">    ...state,</div><div class=\"line\">    productsList: action.payload</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;, initialState)</div></pre></td></tr></table></figure>\n<p>By doing this</p>\n<ul>\n<li>The initial state is very clear</li>\n<li>Action types are not hardcoded</li>\n<li>We are using an object notation instead of a switch</li>\n<li>And we are clearly resolving the deeply nested problem the API may be sending us.</li>\n</ul>\n<p>Finally, I recommend to have <code>src/reducers/index.js</code> to centralize all your reducers and keep a clear idea of your state:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/reducers/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> products <span class=\"keyword\">from</span> <span class=\"string\">'./products'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> combineReducers(&#123;</div><div class=\"line\">  products</div><div class=\"line\">  <span class=\"comment\">// other reducers</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>This file will then be consumed when we <a href=\"#Store-Config\">configure our store</a>.</p>\n<h2 id=\"Store-Config\"><a href=\"#Store-Config\" class=\"headerlink\" title=\"Store Config\"></a>Store Config</h2><p>This is just an example of how to declare your store. You may find better / cleaner ways to do it. I believe this part of code was needed in the article, given that I mention so many things regarding middlewares. The configureStore is where you reference your <code>reducers/index.js</code> file, creating the store with the data you defined in your reducers, and attaching all the middlewares you want to the actions pipeline.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// src/stores/configureStore.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> createLogger <span class=\"keyword\">from</span> <span class=\"string\">'redux-logger'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; routerMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> promiseMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'redux-promise-middleware'</span></div><div class=\"line\"><span class=\"keyword\">import</span> createSagaMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga'</span></div><div class=\"line\"><span class=\"keyword\">import</span> thunkMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'redux-thunk'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> indexReducer <span class=\"keyword\">from</span> <span class=\"string\">'reducers/index'</span></div><div class=\"line\"><span class=\"keyword\">import</span> rootSaga <span class=\"keyword\">from</span> <span class=\"string\">'sagas/index'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> logger = createLogger(&#123; <span class=\"attr\">collapsed</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\"><span class=\"keyword\">const</span> router = routerMiddleware(browserHistory)</div><div class=\"line\"><span class=\"keyword\">const</span> promise = promiseMiddleware()</div><div class=\"line\"><span class=\"keyword\">const</span> saga = createSagaMiddleware()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> createStoreWithMiddleware = applyMiddleware(</div><div class=\"line\">    router,</div><div class=\"line\">    logger,</div><div class=\"line\">    promise,</div><div class=\"line\">    saga,</div><div class=\"line\">    thunkMiddleware)(createStore)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> configureStore = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> store = createStoreWithMiddleware(rootReducer, &#123;&#125;)</div><div class=\"line\">  saga.run(rootSaga)</div><div class=\"line\">  <span class=\"keyword\">return</span> store</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then you can have an <code>index.jsx</code> file, which will simply import the <code>configureSture</code> function exported by <code>configureStore.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./stores/configureStore'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = configureStore()</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</div><div class=\"line\">  &lt;<span class=\"regexp\">/Provider&gt;,</span></div><div class=\"line\"><span class=\"regexp\">  document.getElementById('yourRootElementId')</span></div><div class=\"line\"><span class=\"regexp\">)</span></div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj7nts0u6000091lrk0w24euc","tag_id":"cj7i7fapa0001milr1pknmg50","_id":"cj7nts0ud000191lrn6nczm3d"},{"post_id":"cj7nts0u6000091lrk0w24euc","tag_id":"cj7i7fape0002milr38kr79ll","_id":"cj7nts0ud000291lrnnjveiui"},{"post_id":"cj7nts0u6000091lrk0w24euc","tag_id":"cj7i7fapg0003milrxek5fcq3","_id":"cj7nts0ue000391lrbinr6j5f"},{"post_id":"cj7nts0u6000091lrk0w24euc","tag_id":"cj7i7fapg0004milr5sn4e8s3","_id":"cj7nts0ue000491lrwtzv2hpd"},{"post_id":"cj7nts0u6000091lrk0w24euc","tag_id":"cj7i7faph0005milrqmsi932t","_id":"cj7nts0ue000591lrzm0uf4o7"},{"post_id":"cj7nts0u6000091lrk0w24euc","tag_id":"cj7i7fapi0006milrhff6k8ni","_id":"cj7nts0uf000691lriptwgxgf"},{"post_id":"cj7nts0u6000091lrk0w24euc","tag_id":"cj7i7fapi0007milrjso7l5k9","_id":"cj7nts0uf000791lruduxip6z"},{"post_id":"cj7nts0u6000091lrk0w24euc","tag_id":"cj7i7fapi0008milr9s6s1xpj","_id":"cj7nts0uf000891lr87nkv703"}],"Tag":[{"name":"redux","_id":"cj7i7fapa0001milr1pknmg50"},{"name":"frontend","_id":"cj7i7fape0002milr38kr79ll"},{"name":"js","_id":"cj7i7fapg0003milrxek5fcq3"},{"name":"javascript","_id":"cj7i7fapg0004milr5sn4e8s3"},{"name":"architecture","_id":"cj7i7faph0005milrqmsi932t"},{"name":"selectors","_id":"cj7i7fapi0006milrhff6k8ni"},{"name":"sagas","_id":"cj7i7fapi0007milrjso7l5k9"},{"name":"middlewares","_id":"cj7i7fapi0008milr9s6s1xpj"}]}}